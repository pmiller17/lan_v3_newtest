
lan_v3_newtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000640  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000640  000006d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800060  00800060  000006d4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000589  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000297  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004d4  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000150  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000023c  00000000  00000000  000020cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	ee c2       	rjmp	.+1500   	; 0x5e2 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	08 c3       	rjmp	.+1552   	; 0x628 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 38       	cpi	r26, 0x82	; 130
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	cc d2       	rcall	.+1432   	; 0x5dc <main>
  44:	fb c2       	rjmp	.+1526   	; 0x63c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_read_vbatt>:
	return ADCH;
}

int adc_read_vbatt()
{
	CFG_ADC_VBATT_GAIN_1;
  48:	1b 98       	cbi	0x03, 3	; 3
  4a:	3c 9a       	sbi	0x07, 4	; 7
  4c:	3b 98       	cbi	0x07, 3	; 7
  4e:	3a 98       	cbi	0x07, 2	; 7
  50:	39 9a       	sbi	0x07, 1	; 7
  52:	38 9a       	sbi	0x07, 0	; 7
  54:	1e 98       	cbi	0x03, 6	; 3
	ADC_TRIGGER_MEASUREMENT;
  56:	36 9a       	sbi	0x06, 6	; 6
  58:	86 b1       	in	r24, 0x06	; 6
	
	return ADCH;
  5a:	85 b1       	in	r24, 0x05	; 5
}
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	08 95       	ret

00000060 <adc_read_ibatt>:

int adc_read_ibatt()
{
	CFG_ADC_IBATT_GAIN_32;
  60:	1b 9a       	sbi	0x03, 3	; 3
  62:	3c 98       	cbi	0x07, 4	; 7
  64:	3b 98       	cbi	0x07, 3	; 7
  66:	3a 98       	cbi	0x07, 2	; 7
  68:	39 9a       	sbi	0x07, 1	; 7
  6a:	38 98       	cbi	0x07, 0	; 7
  6c:	1e 9a       	sbi	0x03, 6	; 3
	ADC_TRIGGER_MEASUREMENT;
  6e:	36 9a       	sbi	0x06, 6	; 6
  70:	86 b1       	in	r24, 0x06	; 6
	
	return ADCH;
  72:	85 b1       	in	r24, 0x05	; 5
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	08 95       	ret

00000078 <initialize_charge>:
unsigned int go_back_bulk = 0;
unsigned int current_offset = 0;

void initialize_charge(void)
{
	overvoltage_thresh_count = 0;
  78:	10 92 7d 00 	sts	0x007D, r1
  7c:	10 92 7e 00 	sts	0x007E, r1
  80:	10 92 7f 00 	sts	0x007F, r1
  84:	10 92 80 00 	sts	0x0080, r1
	enough_bulk_current_counter = 0;
  88:	10 92 6e 00 	sts	0x006E, r1
  8c:	10 92 6f 00 	sts	0x006F, r1
  90:	10 92 70 00 	sts	0x0070, r1
  94:	10 92 71 00 	sts	0x0071, r1
	bulk_charge_reached = FALSE;
  98:	10 92 6d 00 	sts	0x006D, r1
  9c:	10 92 6c 00 	sts	0x006C, r1
	trickle_charge = 0;
  a0:	10 92 68 00 	sts	0x0068, r1
  a4:	10 92 69 00 	sts	0x0069, r1
  a8:	10 92 6a 00 	sts	0x006A, r1
  ac:	10 92 6b 00 	sts	0x006B, r1
	not_enough_volts = 0;
  b0:	10 92 64 00 	sts	0x0064, r1
  b4:	10 92 65 00 	sts	0x0065, r1
  b8:	10 92 66 00 	sts	0x0066, r1
  bc:	10 92 67 00 	sts	0x0067, r1
	go_back_bulk = FALSE;
  c0:	10 92 63 00 	sts	0x0063, r1
  c4:	10 92 62 00 	sts	0x0062, r1
	current_offset = 0;
  c8:	10 92 61 00 	sts	0x0061, r1
  cc:	10 92 60 00 	sts	0x0060, r1
	
	charging_mode = CONSTANT_CURRENT;
  d0:	10 92 81 00 	sts	0x0081, r1
			
	ADC_ENABLE;
  d4:	37 9a       	sbi	0x06, 7	; 6
	ADC_ISR_ENABLE;
  d6:	33 9a       	sbi	0x06, 3	; 6
	FPWM_CLR_COMP_MATCH;
  d8:	80 b7       	in	r24, 0x30	; 48
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	80 bf       	out	0x30, r24	; 48
	TURN_ON_PWM_CLK;
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	8f bd       	out	0x2f, r24	; 47
  e4:	8f b5       	in	r24, 0x2f	; 47
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8f bd       	out	0x2f, r24	; 47
  ea:	8f b5       	in	r24, 0x2f	; 47
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8f bd       	out	0x2f, r24	; 47
  f0:	8f b5       	in	r24, 0x2f	; 47
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8f bd       	out	0x2f, r24	; 47
  f6:	08 95       	ret

000000f8 <charge_battery>:
{
	
	static int battery_current = 0;
	static int battery_voltage = 0;
	
	switch(charging_mode)
  f8:	80 91 81 00 	lds	r24, 0x0081
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <charge_battery+0xa>
 100:	a9 c0       	rjmp	.+338    	; 0x254 <__stack+0xf5>
 102:	20 f0       	brcs	.+8      	; 0x10c <charge_battery+0x14>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	09 f0       	breq	.+2      	; 0x10a <charge_battery+0x12>
 108:	84 c1       	rjmp	.+776    	; 0x412 <__stack+0x2b3>
 10a:	5d c1       	rjmp	.+698    	; 0x3c6 <__stack+0x267>
	{

		case CONSTANT_CURRENT:
			
			battery_current = adc_read_ibatt();
 10c:	a9 df       	rcall	.-174    	; 0x60 <adc_read_ibatt>
 10e:	90 93 73 00 	sts	0x0073, r25
 112:	80 93 72 00 	sts	0x0072, r24
			battery_voltage = adc_read_vbatt();
 116:	98 df       	rcall	.-208    	; 0x48 <adc_read_vbatt>
 118:	90 93 75 00 	sts	0x0075, r25
 11c:	80 93 74 00 	sts	0x0074, r24
			current_offset = battery_current/32;
 120:	80 91 72 00 	lds	r24, 0x0072
 124:	90 91 73 00 	lds	r25, 0x0073
 128:	9c 01       	movw	r18, r24
 12a:	99 23       	and	r25, r25
 12c:	14 f4       	brge	.+4      	; 0x132 <charge_battery+0x3a>
 12e:	21 5e       	subi	r18, 0xE1	; 225
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	35 95       	asr	r19
 134:	27 95       	ror	r18
 136:	35 95       	asr	r19
 138:	27 95       	ror	r18
 13a:	35 95       	asr	r19
 13c:	27 95       	ror	r18
 13e:	35 95       	asr	r19
 140:	27 95       	ror	r18
 142:	35 95       	asr	r19
 144:	27 95       	ror	r18
 146:	30 93 61 00 	sts	0x0061, r19
 14a:	20 93 60 00 	sts	0x0060, r18
			
			if(battery_current < 242)
 14e:	82 3f       	cpi	r24, 0xF2	; 242
 150:	91 05       	cpc	r25, r1
 152:	24 f4       	brge	.+8      	; 0x15c <charge_battery+0x64>
			{
				OCR1B++;
 154:	8c b5       	in	r24, 0x2c	; 44
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	8c bd       	out	0x2c, r24	; 44
 15a:	06 c0       	rjmp	.+12     	; 0x168 <__stack+0x9>
			}
			else if(battery_current > 245)
 15c:	86 3f       	cpi	r24, 0xF6	; 246
 15e:	91 05       	cpc	r25, r1
 160:	1c f0       	brlt	.+6      	; 0x168 <__stack+0x9>
			{
				OCR1B--;
 162:	8c b5       	in	r24, 0x2c	; 44
 164:	81 50       	subi	r24, 0x01	; 1
 166:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_current >= 242)
 168:	20 91 72 00 	lds	r18, 0x0072
 16c:	30 91 73 00 	lds	r19, 0x0073
 170:	22 3f       	cpi	r18, 0xF2	; 242
 172:	31 05       	cpc	r19, r1
 174:	f4 f0       	brlt	.+60     	; 0x1b2 <__stack+0x53>
			{			
				enough_bulk_current_counter++;
 176:	80 91 6e 00 	lds	r24, 0x006E
 17a:	90 91 6f 00 	lds	r25, 0x006F
 17e:	a0 91 70 00 	lds	r26, 0x0070
 182:	b0 91 71 00 	lds	r27, 0x0071
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	a1 1d       	adc	r26, r1
 18a:	b1 1d       	adc	r27, r1
 18c:	80 93 6e 00 	sts	0x006E, r24
 190:	90 93 6f 00 	sts	0x006F, r25
 194:	a0 93 70 00 	sts	0x0070, r26
 198:	b0 93 71 00 	sts	0x0071, r27
				if(enough_bulk_current_counter > 2000)
 19c:	81 3d       	cpi	r24, 0xD1	; 209
 19e:	97 40       	sbci	r25, 0x07	; 7
 1a0:	a1 05       	cpc	r26, r1
 1a2:	b1 05       	cpc	r27, r1
 1a4:	30 f0       	brcs	.+12     	; 0x1b2 <__stack+0x53>
				{
					bulk_charge_reached = TRUE;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 6d 00 	sts	0x006D, r25
 1ae:	80 93 6c 00 	sts	0x006C, r24
				}
			}
		
			if((battery_current < 234) & (battery_current > 0))
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	31 09       	sbc	r19, r1
 1b6:	29 3e       	cpi	r18, 0xE9	; 233
 1b8:	31 05       	cpc	r19, r1
 1ba:	40 f4       	brcc	.+16     	; 0x1cc <__stack+0x6d>
			{
				enough_bulk_current_counter = 0;
 1bc:	10 92 6e 00 	sts	0x006E, r1
 1c0:	10 92 6f 00 	sts	0x006F, r1
 1c4:	10 92 70 00 	sts	0x0070, r1
 1c8:	10 92 71 00 	sts	0x0071, r1
			}
			
			if(bulk_charge_reached == TRUE)
 1cc:	80 91 6c 00 	lds	r24, 0x006C
 1d0:	90 91 6d 00 	lds	r25, 0x006D
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	61 f5       	brne	.+88     	; 0x230 <__stack+0xd1>
			{
				if(battery_voltage - current_offset > 220)
 1d8:	20 91 74 00 	lds	r18, 0x0074
 1dc:	30 91 75 00 	lds	r19, 0x0075
 1e0:	80 91 60 00 	lds	r24, 0x0060
 1e4:	90 91 61 00 	lds	r25, 0x0061
 1e8:	28 1b       	sub	r18, r24
 1ea:	39 0b       	sbc	r19, r25
 1ec:	2d 3d       	cpi	r18, 0xDD	; 221
 1ee:	31 05       	cpc	r19, r1
 1f0:	98 f0       	brcs	.+38     	; 0x218 <__stack+0xb9>
				{
					overvoltage_thresh_count++;
 1f2:	80 91 7d 00 	lds	r24, 0x007D
 1f6:	90 91 7e 00 	lds	r25, 0x007E
 1fa:	a0 91 7f 00 	lds	r26, 0x007F
 1fe:	b0 91 80 00 	lds	r27, 0x0080
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	a1 1d       	adc	r26, r1
 206:	b1 1d       	adc	r27, r1
 208:	80 93 7d 00 	sts	0x007D, r24
 20c:	90 93 7e 00 	sts	0x007E, r25
 210:	a0 93 7f 00 	sts	0x007F, r26
 214:	b0 93 80 00 	sts	0x0080, r27
				}
			
				if(battery_voltage - current_offset < 220)
 218:	2c 3d       	cpi	r18, 0xDC	; 220
 21a:	31 05       	cpc	r19, r1
 21c:	48 f4       	brcc	.+18     	; 0x230 <__stack+0xd1>
				{
					overvoltage_thresh_count = 0;
 21e:	10 92 7d 00 	sts	0x007D, r1
 222:	10 92 7e 00 	sts	0x007E, r1
 226:	10 92 7f 00 	sts	0x007F, r1
 22a:	10 92 80 00 	sts	0x0080, r1
 22e:	08 95       	ret
				}
			}
		
			if(overvoltage_thresh_count >= 2000)
 230:	80 91 7d 00 	lds	r24, 0x007D
 234:	90 91 7e 00 	lds	r25, 0x007E
 238:	a0 91 7f 00 	lds	r26, 0x007F
 23c:	b0 91 80 00 	lds	r27, 0x0080
 240:	80 3d       	cpi	r24, 0xD0	; 208
 242:	97 40       	sbci	r25, 0x07	; 7
 244:	a1 05       	cpc	r26, r1
 246:	b1 05       	cpc	r27, r1
 248:	08 f4       	brcc	.+2      	; 0x24c <__stack+0xed>
 24a:	e3 c0       	rjmp	.+454    	; 0x412 <__stack+0x2b3>
			{
				charging_mode = CONSTANT_VOLTAGE;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 81 00 	sts	0x0081, r24
 252:	08 95       	ret
			
		break;

		case CONSTANT_VOLTAGE:
			
			battery_voltage = adc_read_vbatt();
 254:	f9 de       	rcall	.-526    	; 0x48 <adc_read_vbatt>
 256:	90 93 75 00 	sts	0x0075, r25
 25a:	80 93 74 00 	sts	0x0074, r24
			battery_current = adc_read_ibatt();
 25e:	00 df       	rcall	.-512    	; 0x60 <adc_read_ibatt>
 260:	80 93 72 00 	sts	0x0072, r24
 264:	90 93 73 00 	sts	0x0073, r25
			current_offset = battery_current/32;
 268:	28 2f       	mov	r18, r24
 26a:	39 2f       	mov	r19, r25
 26c:	33 23       	and	r19, r19
 26e:	14 f4       	brge	.+4      	; 0x274 <__stack+0x115>
 270:	21 5e       	subi	r18, 0xE1	; 225
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	35 95       	asr	r19
 276:	27 95       	ror	r18
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	35 95       	asr	r19
 27e:	27 95       	ror	r18
 280:	35 95       	asr	r19
 282:	27 95       	ror	r18
 284:	35 95       	asr	r19
 286:	27 95       	ror	r18
 288:	30 93 61 00 	sts	0x0061, r19
 28c:	20 93 60 00 	sts	0x0060, r18
			
			if(battery_voltage - current_offset > 220)
 290:	80 91 74 00 	lds	r24, 0x0074
 294:	90 91 75 00 	lds	r25, 0x0075
 298:	82 1b       	sub	r24, r18
 29a:	93 0b       	sbc	r25, r19
 29c:	8d 3d       	cpi	r24, 0xDD	; 221
 29e:	91 05       	cpc	r25, r1
 2a0:	20 f0       	brcs	.+8      	; 0x2aa <__stack+0x14b>
			{
				OCR1B -= 1;
 2a2:	8c b5       	in	r24, 0x2c	; 44
 2a4:	81 50       	subi	r24, 0x01	; 1
 2a6:	8c bd       	out	0x2c, r24	; 44
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <__stack+0x157>
			}
		
			else if(battery_voltage - current_offset < 220)
 2aa:	8c 3d       	cpi	r24, 0xDC	; 220
 2ac:	91 05       	cpc	r25, r1
 2ae:	18 f4       	brcc	.+6      	; 0x2b6 <__stack+0x157>
			{
				OCR1B += 3;
 2b0:	8c b5       	in	r24, 0x2c	; 44
 2b2:	8d 5f       	subi	r24, 0xFD	; 253
 2b4:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_voltage - current_offset < 208)
 2b6:	20 91 74 00 	lds	r18, 0x0074
 2ba:	30 91 75 00 	lds	r19, 0x0075
 2be:	80 91 60 00 	lds	r24, 0x0060
 2c2:	90 91 61 00 	lds	r25, 0x0061
 2c6:	a9 01       	movw	r20, r18
 2c8:	48 1b       	sub	r20, r24
 2ca:	59 0b       	sbc	r21, r25
 2cc:	40 3d       	cpi	r20, 0xD0	; 208
 2ce:	51 05       	cpc	r21, r1
 2d0:	f0 f4       	brcc	.+60     	; 0x30e <__stack+0x1af>
			{
				not_enough_volts++;
 2d2:	80 91 64 00 	lds	r24, 0x0064
 2d6:	90 91 65 00 	lds	r25, 0x0065
 2da:	a0 91 66 00 	lds	r26, 0x0066
 2de:	b0 91 67 00 	lds	r27, 0x0067
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	a1 1d       	adc	r26, r1
 2e6:	b1 1d       	adc	r27, r1
 2e8:	80 93 64 00 	sts	0x0064, r24
 2ec:	90 93 65 00 	sts	0x0065, r25
 2f0:	a0 93 66 00 	sts	0x0066, r26
 2f4:	b0 93 67 00 	sts	0x0067, r27
				if(not_enough_volts >= 1000)
 2f8:	88 3e       	cpi	r24, 0xE8	; 232
 2fa:	93 40       	sbci	r25, 0x03	; 3
 2fc:	a1 05       	cpc	r26, r1
 2fe:	b1 05       	cpc	r27, r1
 300:	30 f0       	brcs	.+12     	; 0x30e <__stack+0x1af>
				{
					go_back_bulk = TRUE;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 63 00 	sts	0x0063, r25
 30a:	80 93 62 00 	sts	0x0062, r24
				}
			}
		
			if(battery_voltage - current_offset > 216)
 30e:	49 3d       	cpi	r20, 0xD9	; 217
 310:	51 05       	cpc	r21, r1
 312:	40 f0       	brcs	.+16     	; 0x324 <__stack+0x1c5>
			{
				not_enough_volts = 0;
 314:	10 92 64 00 	sts	0x0064, r1
 318:	10 92 65 00 	sts	0x0065, r1
 31c:	10 92 66 00 	sts	0x0066, r1
 320:	10 92 67 00 	sts	0x0067, r1
			}
		
			if(battery_voltage > 240)
 324:	21 3f       	cpi	r18, 0xF1	; 241
 326:	31 05       	cpc	r19, r1
 328:	14 f0       	brlt	.+4      	; 0x32e <__stack+0x1cf>
			{
				OCR1B = 160;
 32a:	80 ea       	ldi	r24, 0xA0	; 160
 32c:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_voltage < 170)
 32e:	80 91 74 00 	lds	r24, 0x0074
 332:	90 91 75 00 	lds	r25, 0x0075
 336:	8a 3a       	cpi	r24, 0xAA	; 170
 338:	91 05       	cpc	r25, r1
 33a:	14 f4       	brge	.+4      	; 0x340 <__stack+0x1e1>
			{
				OCR1B = 130;
 33c:	82 e8       	ldi	r24, 0x82	; 130
 33e:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(go_back_bulk)
 340:	80 91 62 00 	lds	r24, 0x0062
 344:	90 91 63 00 	lds	r25, 0x0063
 348:	89 2b       	or	r24, r25
 34a:	31 f0       	breq	.+12     	; 0x358 <__stack+0x1f9>
			{
				charging_mode = CONSTANT_CURRENT;
 34c:	10 92 81 00 	sts	0x0081, r1
				go_back_bulk = 0;
 350:	10 92 63 00 	sts	0x0063, r1
 354:	10 92 62 00 	sts	0x0062, r1
			}	
		
			if(battery_current < 10)
 358:	20 91 72 00 	lds	r18, 0x0072
 35c:	30 91 73 00 	lds	r19, 0x0073
 360:	2a 30       	cpi	r18, 0x0A	; 10
 362:	31 05       	cpc	r19, r1
 364:	9c f4       	brge	.+38     	; 0x38c <__stack+0x22d>
			{
				trickle_charge++;
 366:	80 91 68 00 	lds	r24, 0x0068
 36a:	90 91 69 00 	lds	r25, 0x0069
 36e:	a0 91 6a 00 	lds	r26, 0x006A
 372:	b0 91 6b 00 	lds	r27, 0x006B
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	a1 1d       	adc	r26, r1
 37a:	b1 1d       	adc	r27, r1
 37c:	80 93 68 00 	sts	0x0068, r24
 380:	90 93 69 00 	sts	0x0069, r25
 384:	a0 93 6a 00 	sts	0x006A, r26
 388:	b0 93 6b 00 	sts	0x006B, r27
			}
		
			if(battery_current > 30)
 38c:	2f 31       	cpi	r18, 0x1F	; 31
 38e:	31 05       	cpc	r19, r1
 390:	4c f0       	brlt	.+18     	; 0x3a4 <__stack+0x245>
			{
				trickle_charge = 0;
 392:	10 92 68 00 	sts	0x0068, r1
 396:	10 92 69 00 	sts	0x0069, r1
 39a:	10 92 6a 00 	sts	0x006A, r1
 39e:	10 92 6b 00 	sts	0x006B, r1
 3a2:	08 95       	ret
			}
		
			if(trickle_charge >= 2000)
 3a4:	80 91 68 00 	lds	r24, 0x0068
 3a8:	90 91 69 00 	lds	r25, 0x0069
 3ac:	a0 91 6a 00 	lds	r26, 0x006A
 3b0:	b0 91 6b 00 	lds	r27, 0x006B
 3b4:	80 3d       	cpi	r24, 0xD0	; 208
 3b6:	97 40       	sbci	r25, 0x07	; 7
 3b8:	a1 05       	cpc	r26, r1
 3ba:	b1 05       	cpc	r27, r1
 3bc:	50 f1       	brcs	.+84     	; 0x412 <__stack+0x2b3>
			{
				charging_mode = TRICKLE_CHARGE;
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	80 93 81 00 	sts	0x0081, r24
 3c4:	08 95       	ret
		
		break;
		
		case TRICKLE_CHARGE:
			
			battery_voltage = adc_read_vbatt();
 3c6:	40 de       	rcall	.-896    	; 0x48 <adc_read_vbatt>
 3c8:	90 93 75 00 	sts	0x0075, r25
 3cc:	80 93 74 00 	sts	0x0074, r24
			current_offset = adc_read_ibatt();
 3d0:	47 de       	rcall	.-882    	; 0x60 <adc_read_ibatt>
			current_offset = current_offset/32;
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	92 95       	swap	r25
 3d8:	82 95       	swap	r24
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	89 27       	eor	r24, r25
 3de:	9f 70       	andi	r25, 0x0F	; 15
 3e0:	89 27       	eor	r24, r25
 3e2:	90 93 61 00 	sts	0x0061, r25
 3e6:	80 93 60 00 	sts	0x0060, r24
			
			if(battery_voltage - current_offset > 220)
 3ea:	20 91 74 00 	lds	r18, 0x0074
 3ee:	30 91 75 00 	lds	r19, 0x0075
 3f2:	a9 01       	movw	r20, r18
 3f4:	48 1b       	sub	r20, r24
 3f6:	59 0b       	sbc	r21, r25
 3f8:	4d 3d       	cpi	r20, 0xDD	; 221
 3fa:	51 05       	cpc	r21, r1
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__stack+0x2a7>
			{
				OCR1B -= 1;
 3fe:	8c b5       	in	r24, 0x2c	; 44
 400:	81 50       	subi	r24, 0x01	; 1
 402:	8c bd       	out	0x2c, r24	; 44
 404:	08 95       	ret
			}
		
			else if(battery_voltage - current_offset < 220)
 406:	4c 3d       	cpi	r20, 0xDC	; 220
 408:	51 05       	cpc	r21, r1
 40a:	18 f4       	brcc	.+6      	; 0x412 <__stack+0x2b3>
			{
				OCR1B += 3;		
 40c:	8c b5       	in	r24, 0x2c	; 44
 40e:	8d 5f       	subi	r24, 0xFD	; 253
 410:	8c bd       	out	0x2c, r24	; 44
 412:	08 95       	ret

00000414 <debounce_jack>:
#include "debounce.h"
#include "lan.h"


int debounce_jack(void)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <debounce_jack+0x6>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
	int jack_plugged_in;
	volatile int debounce_counter = 0;
 41e:	1a 82       	std	Y+2, r1	; 0x02
 420:	19 82       	std	Y+1, r1	; 0x01
	
	while(debounce_counter < JACK_DELAY_TIME)
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	80 39       	cpi	r24, 0x90	; 144
 428:	91 40       	sbci	r25, 0x01	; 1
 42a:	54 f4       	brge	.+20     	; 0x440 <debounce_jack+0x2c>
	{
		debounce_counter += 1;
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	9a 83       	std	Y+2, r25	; 0x02
 434:	89 83       	std	Y+1, r24	; 0x01
int debounce_jack(void)
{
	int jack_plugged_in;
	volatile int debounce_counter = 0;
	
	while(debounce_counter < JACK_DELAY_TIME)
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	80 39       	cpi	r24, 0x90	; 144
 43c:	91 40       	sbci	r25, 0x01	; 1
 43e:	b4 f3       	brlt	.-20     	; 0x42c <debounce_jack+0x18>
	{
		debounce_counter += 1;
	}
	
	if (JACK_PLUGGED_IN_NOW)
 440:	b4 9b       	sbis	0x16, 4	; 22
 442:	14 c0       	rjmp	.+40     	; 0x46c <debounce_jack+0x58>
	{
		jack_plugged_in = TRUE;
		debounce_counter = 0;
 444:	1a 82       	std	Y+2, r1	; 0x02
 446:	19 82       	std	Y+1, r1	; 0x01
		
		while(debounce_counter < JACK_IGNORE_TIME)
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	9a 81       	ldd	r25, Y+2	; 0x02
 44c:	88 3e       	cpi	r24, 0xE8	; 232
 44e:	93 40       	sbci	r25, 0x03	; 3
 450:	84 f4       	brge	.+32     	; 0x472 <debounce_jack+0x5e>
		{
			debounce_counter += 1;
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	9a 81       	ldd	r25, Y+2	; 0x02
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	9a 83       	std	Y+2, r25	; 0x02
 45a:	89 83       	std	Y+1, r24	; 0x01
	if (JACK_PLUGGED_IN_NOW)
	{
		jack_plugged_in = TRUE;
		debounce_counter = 0;
		
		while(debounce_counter < JACK_IGNORE_TIME)
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	88 3e       	cpi	r24, 0xE8	; 232
 462:	93 40       	sbci	r25, 0x03	; 3
 464:	b4 f3       	brlt	.-20     	; 0x452 <debounce_jack+0x3e>
		debounce_counter += 1;
	}
	
	if (JACK_PLUGGED_IN_NOW)
	{
		jack_plugged_in = TRUE;
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	05 c0       	rjmp	.+10     	; 0x476 <debounce_jack+0x62>
		
	}
	
	else
	{
		jack_plugged_in = FALSE;
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <debounce_jack+0x62>
		debounce_counter += 1;
	}
	
	if (JACK_PLUGGED_IN_NOW)
	{
		jack_plugged_in = TRUE;
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
	{
		jack_plugged_in = FALSE;
	}
	

	debounce_counter = 0;
 476:	1a 82       	std	Y+2, r1	; 0x02
 478:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_PCI_ENABLE;
 47a:	82 b5       	in	r24, 0x22	; 34
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	82 bd       	out	0x22, r24	; 34
	JACK_PCI_ENABLE;	//define!
 480:	82 b5       	in	r24, 0x22	; 34
 482:	80 61       	ori	r24, 0x10	; 16
 484:	82 bd       	out	0x22, r24	; 34
	return jack_plugged_in;
}
 486:	82 2f       	mov	r24, r18
 488:	93 2f       	mov	r25, r19
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <setup>:
}


void setup(void)
{
	cli();
 494:	f8 94       	cli

    int i;
	for(i = 0; i <= 7; i++)
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PCMSK0,i);
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	63 b5       	in	r22, 0x23	; 35
 4a0:	9a 01       	movw	r18, r20
 4a2:	08 2e       	mov	r0, r24
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <setup+0x16>
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <setup+0x12>
 4ae:	20 95       	com	r18
 4b0:	32 2f       	mov	r19, r18
 4b2:	36 23       	and	r19, r22
 4b4:	33 bd       	out	0x23, r19	; 35
		CLRBIT(PCMSK1,i);
 4b6:	32 b5       	in	r19, 0x22	; 34
 4b8:	23 23       	and	r18, r19
 4ba:	22 bd       	out	0x22, r18	; 34
void setup(void)
{
	cli();

    int i;
	for(i = 0; i <= 7; i++)
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	88 30       	cpi	r24, 0x08	; 8
 4c0:	91 05       	cpc	r25, r1
 4c2:	69 f7       	brne	.-38     	; 0x49e <setup+0xa>
		CLRBIT(PCMSK0,i);
		CLRBIT(PCMSK1,i);
	}
  
    /*  Enable the PLL.  */
    ENABLE_PLL;
 4c4:	89 b5       	in	r24, 0x29	; 41
 4c6:	82 60       	ori	r24, 0x02	; 2
 4c8:	89 bd       	out	0x29, r24	; 41
    while(PLL_IS_NOT_LOCKED)
 4ca:	09 b4       	in	r0, 0x29	; 41
 4cc:	00 fe       	sbrs	r0, 0
 4ce:	fd cf       	rjmp	.-6      	; 0x4ca <setup+0x36>
    {
        // Waiting for PLOCK bit to be set
    }
    ENABLE_PCK;
 4d0:	89 b5       	in	r24, 0x29	; 41
 4d2:	84 60       	ori	r24, 0x04	; 4
 4d4:	89 bd       	out	0x29, r24	; 41

    /*  Use a prescaler of 16 to set the system clock at 500 kHz (1 MHz?).
    */
    SET_SYS_CLK;
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	88 bd       	out	0x28, r24	; 40
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	88 bd       	out	0x28, r24	; 40

    /*  IO Configurations
    */
	CFG_IO_BUTTON;		
 4de:	b8 98       	cbi	0x17, 0	; 23
 4e0:	c0 9a       	sbi	0x18, 0	; 24
	CFG_IO_LED_ENABLE;
 4e2:	b9 9a       	sbi	0x17, 1	; 23
 4e4:	c1 98       	cbi	0x18, 1	; 24
	CFG_IO_JACK;	
 4e6:	bc 98       	cbi	0x17, 4	; 23
 4e8:	c4 98       	cbi	0x18, 4	; 24
    CFG_IO_PWM;			
 4ea:	bb 9a       	sbi	0x17, 3	; 23
 4ec:	c3 98       	cbi	0x18, 3	; 24
    
    /*  Clock 1 (PWM clock) Configurations
        Use PLL to set clock 1 at 64 MHz, asynchronous from the system clock.
        Use a prescaler of 4 and a TOP value of 256 to have FPWM frequency at 62.5 kHz.
    */
    CFG_PWM;
 4ee:	80 b7       	in	r24, 0x30	; 48
 4f0:	8f 7d       	andi	r24, 0xDF	; 223
 4f2:	80 bf       	out	0x30, r24	; 48
 4f4:	80 b7       	in	r24, 0x30	; 48
 4f6:	8f 7e       	andi	r24, 0xEF	; 239
 4f8:	80 bf       	out	0x30, r24	; 48
 4fa:	80 b7       	in	r24, 0x30	; 48
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	80 bf       	out	0x30, r24	; 48
 500:	86 b5       	in	r24, 0x26	; 38
 502:	8d 7f       	andi	r24, 0xFD	; 253
 504:	86 bd       	out	0x26, r24	; 38
 506:	86 b5       	in	r24, 0x26	; 38
 508:	8e 7f       	andi	r24, 0xFE	; 254
 50a:	86 bd       	out	0x26, r24	; 38
    FPWM_NORMAL_PORT_OP;
 50c:	80 b7       	in	r24, 0x30	; 48
 50e:	8f 7d       	andi	r24, 0xDF	; 223
 510:	80 bf       	out	0x30, r24	; 48
    TURN_OFF_PWM_CLK;
 512:	8f b5       	in	r24, 0x2f	; 47
 514:	87 7f       	andi	r24, 0xF7	; 247
 516:	8f bd       	out	0x2f, r24	; 47
 518:	8f b5       	in	r24, 0x2f	; 47
 51a:	8b 7f       	andi	r24, 0xFB	; 251
 51c:	8f bd       	out	0x2f, r24	; 47
 51e:	8f b5       	in	r24, 0x2f	; 47
 520:	8d 7f       	andi	r24, 0xFD	; 253
 522:	8f bd       	out	0x2f, r24	; 47
 524:	8f b5       	in	r24, 0x2f	; 47
 526:	8e 7f       	andi	r24, 0xFE	; 254
 528:	8f bd       	out	0x2f, r24	; 47
	OCR1C = 255;
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	8b bd       	out	0x2b, r24	; 43
    OCR1B = 0;
 52e:	1c bc       	out	0x2c, r1	; 44
		
    CFG_ADC;
 530:	3f 98       	cbi	0x07, 7	; 7
 532:	3e 9a       	sbi	0x07, 6	; 7
 534:	3d 9a       	sbi	0x07, 5	; 7

    ADC_ENABLE;
 536:	37 9a       	sbi	0x06, 7	; 6
    ADC_ISR_ENABLE;
 538:	33 9a       	sbi	0x06, 3	; 6
    
    LED_ENABLE;
 53a:	c1 9a       	sbi	0x18, 1	; 24

	PCI_ENABLE;
 53c:	8b b7       	in	r24, 0x3b	; 59
 53e:	80 62       	ori	r24, 0x20	; 32
 540:	8b bf       	out	0x3b, r24	; 59
 542:	8b b7       	in	r24, 0x3b	; 59
 544:	80 61       	ori	r24, 0x10	; 16
 546:	8b bf       	out	0x3b, r24	; 59
	BUTTON_PCI_ENABLE;
 548:	82 b5       	in	r24, 0x22	; 34
 54a:	81 60       	ori	r24, 0x01	; 1
 54c:	82 bd       	out	0x22, r24	; 34
	JACK_PCI_ENABLE;
 54e:	82 b5       	in	r24, 0x22	; 34
 550:	80 61       	ori	r24, 0x10	; 16
 552:	82 bd       	out	0x22, r24	; 34
	
	FPWM_CLR_COMP_MATCH;
 554:	80 b7       	in	r24, 0x30	; 48
 556:	80 62       	ori	r24, 0x20	; 32
 558:	80 bf       	out	0x30, r24	; 48
	TURN_ON_PWM_CLK;
 55a:	8f b5       	in	r24, 0x2f	; 47
 55c:	87 7f       	andi	r24, 0xF7	; 247
 55e:	8f bd       	out	0x2f, r24	; 47
 560:	8f b5       	in	r24, 0x2f	; 47
 562:	8b 7f       	andi	r24, 0xFB	; 251
 564:	8f bd       	out	0x2f, r24	; 47
 566:	8f b5       	in	r24, 0x2f	; 47
 568:	82 60       	ori	r24, 0x02	; 2
 56a:	8f bd       	out	0x2f, r24	; 47
 56c:	8f b5       	in	r24, 0x2f	; 47
 56e:	81 60       	ori	r24, 0x01	; 1
 570:	8f bd       	out	0x2f, r24	; 47
#if 0	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
#endif

    sei();
 572:	78 94       	sei
 574:	08 95       	ret

00000576 <loop>:
	case CHARGING:
	
}
#endif

jack_pin = JACK_PLUGGED_IN_NOW;
 576:	86 b3       	in	r24, 0x16	; 22
 578:	80 71       	andi	r24, 0x10	; 16
 57a:	80 93 76 00 	sts	0x0076, r24
 57e:	10 92 77 00 	sts	0x0077, r1
if(jack_needs_debounce)
 582:	80 91 7b 00 	lds	r24, 0x007B
 586:	90 91 7c 00 	lds	r25, 0x007C
 58a:	89 2b       	or	r24, r25
 58c:	49 f0       	breq	.+18     	; 0x5a0 <loop+0x2a>
{
	jack_state = debounce_jack();
 58e:	42 df       	rcall	.-380    	; 0x414 <debounce_jack>
 590:	90 93 7a 00 	sts	0x007A, r25
 594:	80 93 79 00 	sts	0x0079, r24
	jack_needs_debounce = FALSE;
 598:	10 92 7c 00 	sts	0x007C, r1
 59c:	10 92 7b 00 	sts	0x007B, r1
}

if(jack_state == TRUE)
 5a0:	80 91 79 00 	lds	r24, 0x0079
 5a4:	90 91 7a 00 	lds	r25, 0x007A
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	49 f4       	brne	.+18     	; 0x5be <loop+0x48>
{
	lantern_op_mode = CHARGING;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 78 00 	sts	0x0078, r24
	initialize_charge();
 5b2:	62 dd       	rcall	.-1340   	; 0x78 <initialize_charge>
{
	lantern_op_mode = LIGHTING;
}

#if 1
while(lantern_op_mode == CHARGING)
 5b4:	80 91 78 00 	lds	r24, 0x0078
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	51 f0       	breq	.+20     	; 0x5d0 <loop+0x5a>
 5bc:	08 95       	ret
{
	lantern_op_mode = CHARGING;
	initialize_charge();
}

else if(jack_state == FALSE)
 5be:	80 91 79 00 	lds	r24, 0x0079
 5c2:	90 91 7a 00 	lds	r25, 0x007A
 5c6:	89 2b       	or	r24, r25
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <loop+0x3e>
{
	lantern_op_mode = LIGHTING;
 5ca:	10 92 78 00 	sts	0x0078, r1
 5ce:	08 95       	ret
}

#if 1
while(lantern_op_mode == CHARGING)
{
	charge_battery();
 5d0:	93 dd       	rcall	.-1242   	; 0xf8 <charge_battery>
{
	lantern_op_mode = LIGHTING;
}

#if 1
while(lantern_op_mode == CHARGING)
 5d2:	80 91 78 00 	lds	r24, 0x0078
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	d9 f3       	breq	.-10     	; 0x5d0 <loop+0x5a>
 5da:	08 95       	ret

000005dc <main>:
lantern_op_mode_t lantern_op_mode = LIGHTING;
int jack_pin = 0;

int main(void)
{
    setup();
 5dc:	5b df       	rcall	.-330    	; 0x494 <setup>
	for (;;) 
	{
		loop();
 5de:	cb df       	rcall	.-106    	; 0x576 <loop>
 5e0:	fe cf       	rjmp	.-4      	; 0x5de <main+0x2>

000005e2 <__vector_2>:
	}
#endif
}

ISR(PCINT_vect)
{
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25

	if(JACK_PLUGGED_IN_NOW)
 5f0:	b4 9b       	sbis	0x16, 4	; 22
 5f2:	0b c0       	rjmp	.+22     	; 0x60a <__vector_2+0x28>
	{
		LED_DISABLE;
 5f4:	c1 98       	cbi	0x18, 1	; 24
		BUTTON_PCI_DISABLE;
 5f6:	82 b5       	in	r24, 0x22	; 34
 5f8:	8e 7f       	andi	r24, 0xFE	; 254
 5fa:	82 bd       	out	0x22, r24	; 34
		jack_needs_debounce = TRUE;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	90 93 7c 00 	sts	0x007C, r25
 604:	80 93 7b 00 	sts	0x007B, r24
 608:	08 c0       	rjmp	.+16     	; 0x61a <__vector_2+0x38>
//		lantern_op_mode = SAFE_OFF;
	}
	else if(JACK_PLUGGED_IN_NOW == 0)
 60a:	b4 99       	sbic	0x16, 4	; 22
 60c:	06 c0       	rjmp	.+12     	; 0x61a <__vector_2+0x38>
	{
//		 
		jack_needs_debounce = TRUE;	
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	90 93 7c 00 	sts	0x007C, r25
 616:	80 93 7b 00 	sts	0x007B, r24
	}
	
}
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_11>:

ISR(ADC_vect)
{
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
	;
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <_exit>:
 63c:	f8 94       	cli

0000063e <__stop_program>:
 63e:	ff cf       	rjmp	.-2      	; 0x63e <__stop_program>
