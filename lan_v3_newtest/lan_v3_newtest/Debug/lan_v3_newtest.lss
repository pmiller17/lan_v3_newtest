
lan_v3_newtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800060  00800060  000007c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005da  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ea  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000469  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000205  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	49 c3       	rjmp	.+1682   	; 0x698 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 38       	cpi	r26, 0x81	; 129
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	27 d3       	rcall	.+1614   	; 0x692 <main>
  44:	73 c3       	rjmp	.+1766   	; 0x72c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_read_vbatt>:
	
	return ADCH;
}

unsigned int adc_read_vbatt(void)
{	
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <adc_read_vbatt+0x6>
  4e:	cd b7       	in	r28, 0x3d	; 61
  50:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned int dummy;
	CFG_ADC_VBATT_GAIN_1;
  52:	1b 98       	cbi	0x03, 3	; 3
  54:	3c 9a       	sbi	0x07, 4	; 7
  56:	3b 98       	cbi	0x07, 3	; 7
  58:	3a 98       	cbi	0x07, 2	; 7
  5a:	39 9a       	sbi	0x07, 1	; 7
  5c:	38 9a       	sbi	0x07, 0	; 7
  5e:	1e 98       	cbi	0x03, 6	; 3
	ADC_TRIGGER_MEASUREMENT;
  60:	36 9a       	sbi	0x06, 6	; 6
  62:	36 99       	sbic	0x06, 6	; 6
  64:	fe cf       	rjmp	.-4      	; 0x62 <adc_read_vbatt+0x1a>
	dummy = ADCH;
  66:	85 b1       	in	r24, 0x05	; 5
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	9a 83       	std	Y+2, r25	; 0x02
  6c:	89 83       	std	Y+1, r24	; 0x01
	ADC_TRIGGER_MEASUREMENT;
  6e:	36 9a       	sbi	0x06, 6	; 6
  70:	36 99       	sbic	0x06, 6	; 6
  72:	fe cf       	rjmp	.-4      	; 0x70 <adc_read_vbatt+0x28>
	dummy = ADCH;
  74:	85 b1       	in	r24, 0x05	; 5
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	9a 83       	std	Y+2, r25	; 0x02
  7a:	89 83       	std	Y+1, r24	; 0x01
	return dummy;
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	9a 81       	ldd	r25, Y+2	; 0x02
}
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	08 95       	ret

0000008a <adc_read_ibatt>:

unsigned int adc_read_ibatt(void)
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	00 d0       	rcall	.+0      	; 0x90 <adc_read_ibatt+0x6>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned int dummy;
	CFG_ADC_IBATT_GAIN_32;
  94:	1b 9a       	sbi	0x03, 3	; 3
  96:	3c 98       	cbi	0x07, 4	; 7
  98:	3b 98       	cbi	0x07, 3	; 7
  9a:	3a 98       	cbi	0x07, 2	; 7
  9c:	39 9a       	sbi	0x07, 1	; 7
  9e:	38 98       	cbi	0x07, 0	; 7
  a0:	1e 9a       	sbi	0x03, 6	; 3
	ADC_TRIGGER_MEASUREMENT;
  a2:	36 9a       	sbi	0x06, 6	; 6
  a4:	36 99       	sbic	0x06, 6	; 6
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <adc_read_ibatt+0x1a>
	dummy = ADCH;
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	9a 83       	std	Y+2, r25	; 0x02
  ae:	89 83       	std	Y+1, r24	; 0x01
	ADC_TRIGGER_MEASUREMENT;
  b0:	36 9a       	sbi	0x06, 6	; 6
  b2:	36 99       	sbic	0x06, 6	; 6
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <adc_read_ibatt+0x28>
	dummy = ADCH;
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	89 83       	std	Y+1, r24	; 0x01
	return dummy;
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	9a 81       	ldd	r25, Y+2	; 0x02
}
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <initialize_charge>:
volatile int battery_voltage;
volatile int battery_current;

void initialize_charge(void)
{
	overvoltage_thresh_count = 0;
  cc:	10 92 7b 00 	sts	0x007B, r1
  d0:	10 92 7c 00 	sts	0x007C, r1
  d4:	10 92 7d 00 	sts	0x007D, r1
  d8:	10 92 7e 00 	sts	0x007E, r1
	enough_bulk_current_counter = 0;
  dc:	10 92 6e 00 	sts	0x006E, r1
  e0:	10 92 6f 00 	sts	0x006F, r1
  e4:	10 92 70 00 	sts	0x0070, r1
  e8:	10 92 71 00 	sts	0x0071, r1
	bulk_charge_reached = FALSE;
  ec:	10 92 6d 00 	sts	0x006D, r1
  f0:	10 92 6c 00 	sts	0x006C, r1
	trickle_charge = 0;
  f4:	10 92 68 00 	sts	0x0068, r1
  f8:	10 92 69 00 	sts	0x0069, r1
  fc:	10 92 6a 00 	sts	0x006A, r1
 100:	10 92 6b 00 	sts	0x006B, r1
	not_enough_volts = 0;
 104:	10 92 64 00 	sts	0x0064, r1
 108:	10 92 65 00 	sts	0x0065, r1
 10c:	10 92 66 00 	sts	0x0066, r1
 110:	10 92 67 00 	sts	0x0067, r1
	go_back_bulk = FALSE;
 114:	10 92 63 00 	sts	0x0063, r1
 118:	10 92 62 00 	sts	0x0062, r1
	current_offset = 0;
 11c:	10 92 61 00 	sts	0x0061, r1
 120:	10 92 60 00 	sts	0x0060, r1
	battery_current = 0;
 124:	10 92 78 00 	sts	0x0078, r1
 128:	10 92 77 00 	sts	0x0077, r1
	battery_voltage = 0;
 12c:	10 92 7a 00 	sts	0x007A, r1
 130:	10 92 79 00 	sts	0x0079, r1
	OCR1B = 0;
 134:	1c bc       	out	0x2c, r1	; 44
	
	charging_mode = CONSTANT_CURRENT;
 136:	10 92 7f 00 	sts	0x007F, r1
			
	ADC_ENABLE;
 13a:	37 9a       	sbi	0x06, 7	; 6
//	ADC_ISR_ENABLE;
	FPWM_CLR_COMP_MATCH;
 13c:	80 b7       	in	r24, 0x30	; 48
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 bf       	out	0x30, r24	; 48
	TURN_ON_PWM_CLK;
 142:	8f b5       	in	r24, 0x2f	; 47
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	8f bd       	out	0x2f, r24	; 47
 148:	8f b5       	in	r24, 0x2f	; 47
 14a:	8b 7f       	andi	r24, 0xFB	; 251
 14c:	8f bd       	out	0x2f, r24	; 47
 14e:	8f b5       	in	r24, 0x2f	; 47
 150:	82 60       	ori	r24, 0x02	; 2
 152:	8f bd       	out	0x2f, r24	; 47
 154:	8f b5       	in	r24, 0x2f	; 47
 156:	81 60       	ori	r24, 0x01	; 1
 158:	8f bd       	out	0x2f, r24	; 47
 15a:	08 95       	ret

0000015c <charge_battery>:
}

void charge_battery(void)
{
	
	switch(charging_mode)
 15c:	80 91 7f 00 	lds	r24, 0x007F
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f4       	brne	.+2      	; 0x166 <__stack+0x7>
 164:	bc c0       	rjmp	.+376    	; 0x2de <__stack+0x17f>
 166:	20 f0       	brcs	.+8      	; 0x170 <__stack+0x11>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	09 f4       	brne	.+2      	; 0x16e <__stack+0xf>
 16c:	79 c1       	rjmp	.+754    	; 0x460 <__stack+0x301>
 16e:	08 95       	ret
	{

		case CONSTANT_CURRENT:
			
			battery_current = adc_read_ibatt();
 170:	8c df       	rcall	.-232    	; 0x8a <adc_read_ibatt>
 172:	90 93 78 00 	sts	0x0078, r25
 176:	80 93 77 00 	sts	0x0077, r24

			current_offset = battery_current/320;
 17a:	80 91 77 00 	lds	r24, 0x0077
 17e:	90 91 78 00 	lds	r25, 0x0078
 182:	60 e4       	ldi	r22, 0x40	; 64
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	ab d2       	rcall	.+1366   	; 0x6de <__divmodhi4>
 188:	70 93 61 00 	sts	0x0061, r23
 18c:	60 93 60 00 	sts	0x0060, r22
			
			if(battery_current < 242)
 190:	80 91 77 00 	lds	r24, 0x0077
 194:	90 91 78 00 	lds	r25, 0x0078
 198:	82 3f       	cpi	r24, 0xF2	; 242
 19a:	91 05       	cpc	r25, r1
 19c:	24 f4       	brge	.+8      	; 0x1a6 <__stack+0x47>
			{
				OCR1B++;
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	8c bd       	out	0x2c, r24	; 44
 1a4:	0a c0       	rjmp	.+20     	; 0x1ba <__stack+0x5b>
			}
			else if(battery_current > 245)
 1a6:	80 91 77 00 	lds	r24, 0x0077
 1aa:	90 91 78 00 	lds	r25, 0x0078
 1ae:	86 3f       	cpi	r24, 0xF6	; 246
 1b0:	91 05       	cpc	r25, r1
 1b2:	1c f0       	brlt	.+6      	; 0x1ba <__stack+0x5b>
			{
				OCR1B--;
 1b4:	8c b5       	in	r24, 0x2c	; 44
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_current >= 242)
 1ba:	80 91 77 00 	lds	r24, 0x0077
 1be:	90 91 78 00 	lds	r25, 0x0078
 1c2:	82 3f       	cpi	r24, 0xF2	; 242
 1c4:	91 05       	cpc	r25, r1
 1c6:	f4 f0       	brlt	.+60     	; 0x204 <__stack+0xa5>
			{			
				enough_bulk_current_counter++;
 1c8:	80 91 6e 00 	lds	r24, 0x006E
 1cc:	90 91 6f 00 	lds	r25, 0x006F
 1d0:	a0 91 70 00 	lds	r26, 0x0070
 1d4:	b0 91 71 00 	lds	r27, 0x0071
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	a1 1d       	adc	r26, r1
 1dc:	b1 1d       	adc	r27, r1
 1de:	80 93 6e 00 	sts	0x006E, r24
 1e2:	90 93 6f 00 	sts	0x006F, r25
 1e6:	a0 93 70 00 	sts	0x0070, r26
 1ea:	b0 93 71 00 	sts	0x0071, r27
				if(enough_bulk_current_counter > 2000)
 1ee:	81 3d       	cpi	r24, 0xD1	; 209
 1f0:	97 40       	sbci	r25, 0x07	; 7
 1f2:	a1 05       	cpc	r26, r1
 1f4:	b1 05       	cpc	r27, r1
 1f6:	30 f0       	brcs	.+12     	; 0x204 <__stack+0xa5>
				{
					bulk_charge_reached = TRUE;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 6d 00 	sts	0x006D, r25
 200:	80 93 6c 00 	sts	0x006C, r24
				}
			}
		
			if((battery_current < 234) & (battery_current > 0))
 204:	20 91 77 00 	lds	r18, 0x0077
 208:	30 91 78 00 	lds	r19, 0x0078
 20c:	80 91 77 00 	lds	r24, 0x0077
 210:	90 91 78 00 	lds	r25, 0x0078
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	18 16       	cp	r1, r24
 218:	19 06       	cpc	r1, r25
 21a:	0c f0       	brlt	.+2      	; 0x21e <__stack+0xbf>
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	44 23       	and	r20, r20
 220:	79 f0       	breq	.+30     	; 0x240 <__stack+0xe1>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	2a 3e       	cpi	r18, 0xEA	; 234
 226:	31 05       	cpc	r19, r1
 228:	0c f0       	brlt	.+2      	; 0x22c <__stack+0xcd>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	88 23       	and	r24, r24
 22e:	41 f0       	breq	.+16     	; 0x240 <__stack+0xe1>
			{
				enough_bulk_current_counter = 0;
 230:	10 92 6e 00 	sts	0x006E, r1
 234:	10 92 6f 00 	sts	0x006F, r1
 238:	10 92 70 00 	sts	0x0070, r1
 23c:	10 92 71 00 	sts	0x0071, r1
			}
			
			battery_voltage = adc_read_vbatt();			
 240:	03 df       	rcall	.-506    	; 0x48 <adc_read_vbatt>
 242:	90 93 7a 00 	sts	0x007A, r25
 246:	80 93 79 00 	sts	0x0079, r24
			if(bulk_charge_reached == TRUE)
 24a:	80 91 6c 00 	lds	r24, 0x006C
 24e:	90 91 6d 00 	lds	r25, 0x006D
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	91 f5       	brne	.+100    	; 0x2ba <__stack+0x15b>
			{
				if(battery_voltage - current_offset > 220)
 256:	80 91 79 00 	lds	r24, 0x0079
 25a:	90 91 7a 00 	lds	r25, 0x007A
 25e:	20 91 60 00 	lds	r18, 0x0060
 262:	30 91 61 00 	lds	r19, 0x0061
 266:	82 1b       	sub	r24, r18
 268:	93 0b       	sbc	r25, r19
 26a:	8d 3d       	cpi	r24, 0xDD	; 221
 26c:	91 05       	cpc	r25, r1
 26e:	98 f0       	brcs	.+38     	; 0x296 <__stack+0x137>
				{
					overvoltage_thresh_count++;
 270:	80 91 7b 00 	lds	r24, 0x007B
 274:	90 91 7c 00 	lds	r25, 0x007C
 278:	a0 91 7d 00 	lds	r26, 0x007D
 27c:	b0 91 7e 00 	lds	r27, 0x007E
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	a1 1d       	adc	r26, r1
 284:	b1 1d       	adc	r27, r1
 286:	80 93 7b 00 	sts	0x007B, r24
 28a:	90 93 7c 00 	sts	0x007C, r25
 28e:	a0 93 7d 00 	sts	0x007D, r26
 292:	b0 93 7e 00 	sts	0x007E, r27
				}
			
				if(battery_voltage - current_offset < 220)
 296:	80 91 79 00 	lds	r24, 0x0079
 29a:	90 91 7a 00 	lds	r25, 0x007A
 29e:	82 1b       	sub	r24, r18
 2a0:	93 0b       	sbc	r25, r19
 2a2:	8c 3d       	cpi	r24, 0xDC	; 220
 2a4:	91 05       	cpc	r25, r1
 2a6:	48 f4       	brcc	.+18     	; 0x2ba <__stack+0x15b>
				{
					overvoltage_thresh_count = 0;
 2a8:	10 92 7b 00 	sts	0x007B, r1
 2ac:	10 92 7c 00 	sts	0x007C, r1
 2b0:	10 92 7d 00 	sts	0x007D, r1
 2b4:	10 92 7e 00 	sts	0x007E, r1
 2b8:	08 95       	ret
				}
			}
		
			if(overvoltage_thresh_count >= 2000)
 2ba:	80 91 7b 00 	lds	r24, 0x007B
 2be:	90 91 7c 00 	lds	r25, 0x007C
 2c2:	a0 91 7d 00 	lds	r26, 0x007D
 2c6:	b0 91 7e 00 	lds	r27, 0x007E
 2ca:	80 3d       	cpi	r24, 0xD0	; 208
 2cc:	97 40       	sbci	r25, 0x07	; 7
 2ce:	a1 05       	cpc	r26, r1
 2d0:	b1 05       	cpc	r27, r1
 2d2:	08 f4       	brcc	.+2      	; 0x2d6 <__stack+0x177>
 2d4:	f3 c0       	rjmp	.+486    	; 0x4bc <__stack+0x35d>
			{
				charging_mode = CONSTANT_VOLTAGE;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 7f 00 	sts	0x007F, r24
 2dc:	08 95       	ret
			
		break;

		case CONSTANT_VOLTAGE:
			
			battery_voltage = adc_read_vbatt();
 2de:	b4 de       	rcall	.-664    	; 0x48 <adc_read_vbatt>
 2e0:	90 93 7a 00 	sts	0x007A, r25
 2e4:	80 93 79 00 	sts	0x0079, r24
			battery_current = adc_read_ibatt();
 2e8:	d0 de       	rcall	.-608    	; 0x8a <adc_read_ibatt>
 2ea:	90 93 78 00 	sts	0x0078, r25
 2ee:	80 93 77 00 	sts	0x0077, r24
			current_offset = battery_current/320;
 2f2:	80 91 77 00 	lds	r24, 0x0077
 2f6:	90 91 78 00 	lds	r25, 0x0078
 2fa:	60 e4       	ldi	r22, 0x40	; 64
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	ef d1       	rcall	.+990    	; 0x6de <__divmodhi4>
 300:	70 93 61 00 	sts	0x0061, r23
 304:	60 93 60 00 	sts	0x0060, r22
			
			if(battery_voltage - current_offset > 220)
 308:	80 91 79 00 	lds	r24, 0x0079
 30c:	90 91 7a 00 	lds	r25, 0x007A
 310:	86 1b       	sub	r24, r22
 312:	97 0b       	sbc	r25, r23
 314:	8d 3d       	cpi	r24, 0xDD	; 221
 316:	91 05       	cpc	r25, r1
 318:	20 f0       	brcs	.+8      	; 0x322 <__stack+0x1c3>
			{
				OCR1B -= 1;
 31a:	8c b5       	in	r24, 0x2c	; 44
 31c:	81 50       	subi	r24, 0x01	; 1
 31e:	8c bd       	out	0x2c, r24	; 44
 320:	0c c0       	rjmp	.+24     	; 0x33a <__stack+0x1db>
			}
		
			else if(battery_voltage - current_offset < 220)
 322:	80 91 79 00 	lds	r24, 0x0079
 326:	90 91 7a 00 	lds	r25, 0x007A
 32a:	86 1b       	sub	r24, r22
 32c:	97 0b       	sbc	r25, r23
 32e:	8c 3d       	cpi	r24, 0xDC	; 220
 330:	91 05       	cpc	r25, r1
 332:	18 f4       	brcc	.+6      	; 0x33a <__stack+0x1db>
			{
				OCR1B += 3;
 334:	8c b5       	in	r24, 0x2c	; 44
 336:	8d 5f       	subi	r24, 0xFD	; 253
 338:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_voltage - current_offset < 208)
 33a:	80 91 79 00 	lds	r24, 0x0079
 33e:	90 91 7a 00 	lds	r25, 0x007A
 342:	20 91 60 00 	lds	r18, 0x0060
 346:	30 91 61 00 	lds	r19, 0x0061
 34a:	82 1b       	sub	r24, r18
 34c:	93 0b       	sbc	r25, r19
 34e:	80 3d       	cpi	r24, 0xD0	; 208
 350:	91 05       	cpc	r25, r1
 352:	f0 f4       	brcc	.+60     	; 0x390 <__stack+0x231>
			{
				not_enough_volts++;
 354:	80 91 64 00 	lds	r24, 0x0064
 358:	90 91 65 00 	lds	r25, 0x0065
 35c:	a0 91 66 00 	lds	r26, 0x0066
 360:	b0 91 67 00 	lds	r27, 0x0067
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	a1 1d       	adc	r26, r1
 368:	b1 1d       	adc	r27, r1
 36a:	80 93 64 00 	sts	0x0064, r24
 36e:	90 93 65 00 	sts	0x0065, r25
 372:	a0 93 66 00 	sts	0x0066, r26
 376:	b0 93 67 00 	sts	0x0067, r27
				if(not_enough_volts >= 1000)
 37a:	88 3e       	cpi	r24, 0xE8	; 232
 37c:	93 40       	sbci	r25, 0x03	; 3
 37e:	a1 05       	cpc	r26, r1
 380:	b1 05       	cpc	r27, r1
 382:	30 f0       	brcs	.+12     	; 0x390 <__stack+0x231>
				{
					go_back_bulk = TRUE;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	90 93 63 00 	sts	0x0063, r25
 38c:	80 93 62 00 	sts	0x0062, r24
				}
			}
		
			if(battery_voltage - current_offset > 216)
 390:	80 91 79 00 	lds	r24, 0x0079
 394:	90 91 7a 00 	lds	r25, 0x007A
 398:	82 1b       	sub	r24, r18
 39a:	93 0b       	sbc	r25, r19
 39c:	89 3d       	cpi	r24, 0xD9	; 217
 39e:	91 05       	cpc	r25, r1
 3a0:	40 f0       	brcs	.+16     	; 0x3b2 <__stack+0x253>
			{
				not_enough_volts = 0;
 3a2:	10 92 64 00 	sts	0x0064, r1
 3a6:	10 92 65 00 	sts	0x0065, r1
 3aa:	10 92 66 00 	sts	0x0066, r1
 3ae:	10 92 67 00 	sts	0x0067, r1
			}
		
			if(battery_voltage > 240)
 3b2:	80 91 79 00 	lds	r24, 0x0079
 3b6:	90 91 7a 00 	lds	r25, 0x007A
 3ba:	81 3f       	cpi	r24, 0xF1	; 241
 3bc:	91 05       	cpc	r25, r1
 3be:	14 f0       	brlt	.+4      	; 0x3c4 <__stack+0x265>
			{
				OCR1B = 160;
 3c0:	80 ea       	ldi	r24, 0xA0	; 160
 3c2:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_voltage < 170)
 3c4:	80 91 79 00 	lds	r24, 0x0079
 3c8:	90 91 7a 00 	lds	r25, 0x007A
 3cc:	8a 3a       	cpi	r24, 0xAA	; 170
 3ce:	91 05       	cpc	r25, r1
 3d0:	14 f4       	brge	.+4      	; 0x3d6 <__stack+0x277>
			{
				OCR1B = 130;
 3d2:	82 e8       	ldi	r24, 0x82	; 130
 3d4:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(go_back_bulk)
 3d6:	80 91 62 00 	lds	r24, 0x0062
 3da:	90 91 63 00 	lds	r25, 0x0063
 3de:	89 2b       	or	r24, r25
 3e0:	31 f0       	breq	.+12     	; 0x3ee <__stack+0x28f>
			{
				charging_mode = CONSTANT_CURRENT;
 3e2:	10 92 7f 00 	sts	0x007F, r1
				go_back_bulk = FALSE;
 3e6:	10 92 63 00 	sts	0x0063, r1
 3ea:	10 92 62 00 	sts	0x0062, r1
			}	
		
			if(battery_current < 10)
 3ee:	80 91 77 00 	lds	r24, 0x0077
 3f2:	90 91 78 00 	lds	r25, 0x0078
 3f6:	0a 97       	sbiw	r24, 0x0a	; 10
 3f8:	9c f4       	brge	.+38     	; 0x420 <__stack+0x2c1>
			{
				trickle_charge++;
 3fa:	80 91 68 00 	lds	r24, 0x0068
 3fe:	90 91 69 00 	lds	r25, 0x0069
 402:	a0 91 6a 00 	lds	r26, 0x006A
 406:	b0 91 6b 00 	lds	r27, 0x006B
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	a1 1d       	adc	r26, r1
 40e:	b1 1d       	adc	r27, r1
 410:	80 93 68 00 	sts	0x0068, r24
 414:	90 93 69 00 	sts	0x0069, r25
 418:	a0 93 6a 00 	sts	0x006A, r26
 41c:	b0 93 6b 00 	sts	0x006B, r27
			}
		
			if(battery_current > 30)
 420:	80 91 77 00 	lds	r24, 0x0077
 424:	90 91 78 00 	lds	r25, 0x0078
 428:	4f 97       	sbiw	r24, 0x1f	; 31
 42a:	4c f0       	brlt	.+18     	; 0x43e <__stack+0x2df>
			{
				trickle_charge = 0;
 42c:	10 92 68 00 	sts	0x0068, r1
 430:	10 92 69 00 	sts	0x0069, r1
 434:	10 92 6a 00 	sts	0x006A, r1
 438:	10 92 6b 00 	sts	0x006B, r1
 43c:	08 95       	ret
			}
		
			if(trickle_charge >= 2000)
 43e:	80 91 68 00 	lds	r24, 0x0068
 442:	90 91 69 00 	lds	r25, 0x0069
 446:	a0 91 6a 00 	lds	r26, 0x006A
 44a:	b0 91 6b 00 	lds	r27, 0x006B
 44e:	80 3d       	cpi	r24, 0xD0	; 208
 450:	97 40       	sbci	r25, 0x07	; 7
 452:	a1 05       	cpc	r26, r1
 454:	b1 05       	cpc	r27, r1
 456:	90 f1       	brcs	.+100    	; 0x4bc <__stack+0x35d>
			{
				charging_mode = TRICKLE_CHARGE;
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	80 93 7f 00 	sts	0x007F, r24
 45e:	08 95       	ret
		
		break;
		
		case TRICKLE_CHARGE:
			
			battery_voltage = adc_read_vbatt();
 460:	f3 dd       	rcall	.-1050   	; 0x48 <adc_read_vbatt>
 462:	90 93 7a 00 	sts	0x007A, r25
 466:	80 93 79 00 	sts	0x0079, r24
			battery_current = adc_read_ibatt();
 46a:	0f de       	rcall	.-994    	; 0x8a <adc_read_ibatt>
 46c:	90 93 78 00 	sts	0x0078, r25
 470:	80 93 77 00 	sts	0x0077, r24
			current_offset = battery_current/320;
 474:	80 91 77 00 	lds	r24, 0x0077
 478:	90 91 78 00 	lds	r25, 0x0078
 47c:	60 e4       	ldi	r22, 0x40	; 64
 47e:	71 e0       	ldi	r23, 0x01	; 1
 480:	2e d1       	rcall	.+604    	; 0x6de <__divmodhi4>
 482:	70 93 61 00 	sts	0x0061, r23
 486:	60 93 60 00 	sts	0x0060, r22
			
			if(battery_voltage - current_offset > 220)
 48a:	80 91 79 00 	lds	r24, 0x0079
 48e:	90 91 7a 00 	lds	r25, 0x007A
 492:	86 1b       	sub	r24, r22
 494:	97 0b       	sbc	r25, r23
 496:	8d 3d       	cpi	r24, 0xDD	; 221
 498:	91 05       	cpc	r25, r1
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__stack+0x345>
			{
				OCR1B -= 1;
 49c:	8c b5       	in	r24, 0x2c	; 44
 49e:	81 50       	subi	r24, 0x01	; 1
 4a0:	8c bd       	out	0x2c, r24	; 44
 4a2:	08 95       	ret
			}
		
			else if(battery_voltage - current_offset < 220)
 4a4:	80 91 79 00 	lds	r24, 0x0079
 4a8:	90 91 7a 00 	lds	r25, 0x007A
 4ac:	86 1b       	sub	r24, r22
 4ae:	97 0b       	sbc	r25, r23
 4b0:	8c 3d       	cpi	r24, 0xDC	; 220
 4b2:	91 05       	cpc	r25, r1
 4b4:	18 f4       	brcc	.+6      	; 0x4bc <__stack+0x35d>
			{
				OCR1B += 3;		
 4b6:	8c b5       	in	r24, 0x2c	; 44
 4b8:	8d 5f       	subi	r24, 0xFD	; 253
 4ba:	8c bd       	out	0x2c, r24	; 44
 4bc:	08 95       	ret

000004be <debounce_jack>:
#include "debounce.h"
#include "lan.h"


int debounce_jack(void)
{
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <debounce_jack+0x6>
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
	int jack_plugged_in;
	volatile int debounce_counter = 0;
 4c8:	1a 82       	std	Y+2, r1	; 0x02
 4ca:	19 82       	std	Y+1, r1	; 0x01
	
	while(debounce_counter < JACK_DELAY_TIME)
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	9a 81       	ldd	r25, Y+2	; 0x02
 4d0:	80 39       	cpi	r24, 0x90	; 144
 4d2:	91 40       	sbci	r25, 0x01	; 1
 4d4:	54 f4       	brge	.+20     	; 0x4ea <debounce_jack+0x2c>
	{
		debounce_counter += 1;
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	9a 81       	ldd	r25, Y+2	; 0x02
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	9a 83       	std	Y+2, r25	; 0x02
 4de:	89 83       	std	Y+1, r24	; 0x01
int debounce_jack(void)
{
	int jack_plugged_in;
	volatile int debounce_counter = 0;
	
	while(debounce_counter < JACK_DELAY_TIME)
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	9a 81       	ldd	r25, Y+2	; 0x02
 4e4:	80 39       	cpi	r24, 0x90	; 144
 4e6:	91 40       	sbci	r25, 0x01	; 1
 4e8:	b4 f3       	brlt	.-20     	; 0x4d6 <debounce_jack+0x18>
	{
		debounce_counter += 1;
	}
	
	if (JACK_PLUGGED_IN_NOW)
 4ea:	b4 9b       	sbis	0x16, 4	; 22
 4ec:	12 c0       	rjmp	.+36     	; 0x512 <debounce_jack+0x54>
	{
		jack_plugged_in = TRUE;
		debounce_counter = 0;
 4ee:	1a 82       	std	Y+2, r1	; 0x02
 4f0:	19 82       	std	Y+1, r1	; 0x01
		
		while(debounce_counter < JACK_IGNORE_TIME)
 4f2:	89 81       	ldd	r24, Y+1	; 0x01
 4f4:	9a 81       	ldd	r25, Y+2	; 0x02
 4f6:	88 3e       	cpi	r24, 0xE8	; 232
 4f8:	93 40       	sbci	r25, 0x03	; 3
 4fa:	74 f4       	brge	.+28     	; 0x518 <debounce_jack+0x5a>
		{
			debounce_counter += 1;
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	9a 81       	ldd	r25, Y+2	; 0x02
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	9a 83       	std	Y+2, r25	; 0x02
 504:	89 83       	std	Y+1, r24	; 0x01
	if (JACK_PLUGGED_IN_NOW)
	{
		jack_plugged_in = TRUE;
		debounce_counter = 0;
		
		while(debounce_counter < JACK_IGNORE_TIME)
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	9a 81       	ldd	r25, Y+2	; 0x02
 50a:	88 3e       	cpi	r24, 0xE8	; 232
 50c:	93 40       	sbci	r25, 0x03	; 3
 50e:	b4 f3       	brlt	.-20     	; 0x4fc <debounce_jack+0x3e>
 510:	06 c0       	rjmp	.+12     	; 0x51e <debounce_jack+0x60>
		
	}
	
	else
	{
		jack_plugged_in = FALSE;
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	05 c0       	rjmp	.+10     	; 0x522 <debounce_jack+0x64>
		debounce_counter += 1;
	}
	
	if (JACK_PLUGGED_IN_NOW)
	{
		jack_plugged_in = TRUE;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <debounce_jack+0x64>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
	{
		jack_plugged_in = FALSE;
	}
	

	debounce_counter = 0;
 522:	1a 82       	std	Y+2, r1	; 0x02
 524:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_PCI_ENABLE;
 526:	22 b5       	in	r18, 0x22	; 34
 528:	21 60       	ori	r18, 0x01	; 1
 52a:	22 bd       	out	0x22, r18	; 34
	JACK_PCI_ENABLE;	//define!
 52c:	22 b5       	in	r18, 0x22	; 34
 52e:	20 61       	ori	r18, 0x10	; 16
 530:	22 bd       	out	0x22, r18	; 34
	return jack_plugged_in;
}
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <setup>:
}


void setup(void)
{
	cli();
 53c:	f8 94       	cli

    int i;
	for(i = 0; i <= 7; i++)
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PCMSK0,i);
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	63 b5       	in	r22, 0x23	; 35
 548:	9a 01       	movw	r18, r20
 54a:	08 2e       	mov	r0, r24
 54c:	02 c0       	rjmp	.+4      	; 0x552 <setup+0x16>
 54e:	22 0f       	add	r18, r18
 550:	33 1f       	adc	r19, r19
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <setup+0x12>
 556:	20 95       	com	r18
 558:	32 2f       	mov	r19, r18
 55a:	36 23       	and	r19, r22
 55c:	33 bd       	out	0x23, r19	; 35
		CLRBIT(PCMSK1,i);
 55e:	32 b5       	in	r19, 0x22	; 34
 560:	23 23       	and	r18, r19
 562:	22 bd       	out	0x22, r18	; 34
void setup(void)
{
	cli();

    int i;
	for(i = 0; i <= 7; i++)
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	88 30       	cpi	r24, 0x08	; 8
 568:	91 05       	cpc	r25, r1
 56a:	69 f7       	brne	.-38     	; 0x546 <setup+0xa>
		CLRBIT(PCMSK0,i);
		CLRBIT(PCMSK1,i);
	}
  
    /*  Enable the PLL.  */
    ENABLE_PLL;
 56c:	89 b5       	in	r24, 0x29	; 41
 56e:	82 60       	ori	r24, 0x02	; 2
 570:	89 bd       	out	0x29, r24	; 41
    while(PLL_IS_NOT_LOCKED)
 572:	09 b4       	in	r0, 0x29	; 41
 574:	00 fe       	sbrs	r0, 0
 576:	fd cf       	rjmp	.-6      	; 0x572 <setup+0x36>
    {
        // Waiting for PLOCK bit to be set
    }
    ENABLE_PCK;
 578:	89 b5       	in	r24, 0x29	; 41
 57a:	84 60       	ori	r24, 0x04	; 4
 57c:	89 bd       	out	0x29, r24	; 41

    /*  Use a prescaler of 16 to set the system clock at 500 kHz (1 MHz?).
    */
    SET_SYS_CLK;
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	88 bd       	out	0x28, r24	; 40
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	88 bd       	out	0x28, r24	; 40

    /*  IO Configurations
    */
	CFG_IO_BUTTON;		
 586:	b8 98       	cbi	0x17, 0	; 23
 588:	c0 9a       	sbi	0x18, 0	; 24
	CFG_IO_LED_ENABLE;
 58a:	b9 9a       	sbi	0x17, 1	; 23
 58c:	c1 98       	cbi	0x18, 1	; 24
	CFG_IO_JACK;	
 58e:	bc 98       	cbi	0x17, 4	; 23
 590:	c4 98       	cbi	0x18, 4	; 24
    CFG_IO_PWM;			
 592:	bb 9a       	sbi	0x17, 3	; 23
 594:	c3 98       	cbi	0x18, 3	; 24
    
    /*  Clock 1 (PWM clock) Configurations
        Use PLL to set clock 1 at 64 MHz, asynchronous from the system clock.
        Use a prescaler of 4 and a TOP value of 256 to have FPWM frequency at 62.5 kHz.
    */
    CFG_PWM;
 596:	80 b7       	in	r24, 0x30	; 48
 598:	8f 7d       	andi	r24, 0xDF	; 223
 59a:	80 bf       	out	0x30, r24	; 48
 59c:	80 b7       	in	r24, 0x30	; 48
 59e:	8f 7e       	andi	r24, 0xEF	; 239
 5a0:	80 bf       	out	0x30, r24	; 48
 5a2:	80 b7       	in	r24, 0x30	; 48
 5a4:	81 60       	ori	r24, 0x01	; 1
 5a6:	80 bf       	out	0x30, r24	; 48
 5a8:	86 b5       	in	r24, 0x26	; 38
 5aa:	8d 7f       	andi	r24, 0xFD	; 253
 5ac:	86 bd       	out	0x26, r24	; 38
 5ae:	86 b5       	in	r24, 0x26	; 38
 5b0:	8e 7f       	andi	r24, 0xFE	; 254
 5b2:	86 bd       	out	0x26, r24	; 38
    FPWM_NORMAL_PORT_OP;
 5b4:	80 b7       	in	r24, 0x30	; 48
 5b6:	8f 7d       	andi	r24, 0xDF	; 223
 5b8:	80 bf       	out	0x30, r24	; 48
    TURN_OFF_PWM_CLK;
 5ba:	8f b5       	in	r24, 0x2f	; 47
 5bc:	87 7f       	andi	r24, 0xF7	; 247
 5be:	8f bd       	out	0x2f, r24	; 47
 5c0:	8f b5       	in	r24, 0x2f	; 47
 5c2:	8b 7f       	andi	r24, 0xFB	; 251
 5c4:	8f bd       	out	0x2f, r24	; 47
 5c6:	8f b5       	in	r24, 0x2f	; 47
 5c8:	8d 7f       	andi	r24, 0xFD	; 253
 5ca:	8f bd       	out	0x2f, r24	; 47
 5cc:	8f b5       	in	r24, 0x2f	; 47
 5ce:	8e 7f       	andi	r24, 0xFE	; 254
 5d0:	8f bd       	out	0x2f, r24	; 47
	OCR1C = 255;
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	8b bd       	out	0x2b, r24	; 43
    OCR1B = 0;
 5d6:	1c bc       	out	0x2c, r1	; 44
		
    CFG_ADC;
 5d8:	3f 98       	cbi	0x07, 7	; 7
 5da:	3e 9a       	sbi	0x07, 6	; 7
 5dc:	3d 9a       	sbi	0x07, 5	; 7
 5de:	35 98       	cbi	0x06, 5	; 6

    ADC_ENABLE;
 5e0:	37 9a       	sbi	0x06, 7	; 6
//	ADC_ISR_ENABLE;
    
    LED_ENABLE;
 5e2:	c1 9a       	sbi	0x18, 1	; 24

	PCI_ENABLE;
 5e4:	8b b7       	in	r24, 0x3b	; 59
 5e6:	80 62       	ori	r24, 0x20	; 32
 5e8:	8b bf       	out	0x3b, r24	; 59
 5ea:	8b b7       	in	r24, 0x3b	; 59
 5ec:	80 61       	ori	r24, 0x10	; 16
 5ee:	8b bf       	out	0x3b, r24	; 59
	BUTTON_PCI_ENABLE;
 5f0:	82 b5       	in	r24, 0x22	; 34
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	82 bd       	out	0x22, r24	; 34
	JACK_PCI_ENABLE;
 5f6:	82 b5       	in	r24, 0x22	; 34
 5f8:	80 61       	ori	r24, 0x10	; 16
 5fa:	82 bd       	out	0x22, r24	; 34
	
	FPWM_CLR_COMP_MATCH;
 5fc:	80 b7       	in	r24, 0x30	; 48
 5fe:	80 62       	ori	r24, 0x20	; 32
 600:	80 bf       	out	0x30, r24	; 48
	TURN_ON_PWM_CLK;
 602:	8f b5       	in	r24, 0x2f	; 47
 604:	87 7f       	andi	r24, 0xF7	; 247
 606:	8f bd       	out	0x2f, r24	; 47
 608:	8f b5       	in	r24, 0x2f	; 47
 60a:	8b 7f       	andi	r24, 0xFB	; 251
 60c:	8f bd       	out	0x2f, r24	; 47
 60e:	8f b5       	in	r24, 0x2f	; 47
 610:	82 60       	ori	r24, 0x02	; 2
 612:	8f bd       	out	0x2f, r24	; 47
 614:	8f b5       	in	r24, 0x2f	; 47
 616:	81 60       	ori	r24, 0x01	; 1
 618:	8f bd       	out	0x2f, r24	; 47
#if 0	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
#endif
	
	battery_current = 0;
 61a:	10 92 78 00 	sts	0x0078, r1
 61e:	10 92 77 00 	sts	0x0077, r1
	battery_voltage = 0;
 622:	10 92 7a 00 	sts	0x007A, r1
 626:	10 92 79 00 	sts	0x0079, r1
	pwm_value = 0;
 62a:	10 92 80 00 	sts	0x0080, r1
    sei();
 62e:	78 94       	sei
 630:	08 95       	ret

00000632 <loop>:
	

#if JACK_DEBOUNCE


if(jack_needs_debounce)
 632:	80 91 75 00 	lds	r24, 0x0075
 636:	90 91 76 00 	lds	r25, 0x0076
 63a:	89 2b       	or	r24, r25
 63c:	49 f0       	breq	.+18     	; 0x650 <loop+0x1e>
{
	jack_state = debounce_jack();
 63e:	3f df       	rcall	.-386    	; 0x4be <debounce_jack>
 640:	90 93 74 00 	sts	0x0074, r25
 644:	80 93 73 00 	sts	0x0073, r24
	jack_needs_debounce = FALSE;
 648:	10 92 76 00 	sts	0x0076, r1
 64c:	10 92 75 00 	sts	0x0075, r1
}

if(jack_state == TRUE)
 650:	80 91 73 00 	lds	r24, 0x0073
 654:	90 91 74 00 	lds	r25, 0x0074
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	49 f4       	brne	.+18     	; 0x66e <loop+0x3c>
{
	lantern_op_mode = CHARGING;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 72 00 	sts	0x0072, r24
	initialize_charge();
 662:	34 dd       	rcall	.-1432   	; 0xcc <initialize_charge>
	lantern_op_mode = LIGHTING;
}
#endif

#if RUN_CHARGING
while(lantern_op_mode == CHARGING)
 664:	80 91 72 00 	lds	r24, 0x0072
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	51 f0       	breq	.+20     	; 0x680 <loop+0x4e>
 66c:	08 95       	ret
{
	lantern_op_mode = CHARGING;
	initialize_charge();
}

else if(jack_state == FALSE)
 66e:	80 91 73 00 	lds	r24, 0x0073
 672:	90 91 74 00 	lds	r25, 0x0074
 676:	89 2b       	or	r24, r25
 678:	a9 f7       	brne	.-22     	; 0x664 <loop+0x32>
{
	lantern_op_mode = LIGHTING;
 67a:	10 92 72 00 	sts	0x0072, r1
 67e:	08 95       	ret
#endif

#if RUN_CHARGING
while(lantern_op_mode == CHARGING)
{
	charge_battery();
 680:	6d dd       	rcall	.-1318   	; 0x15c <charge_battery>
	pwm_value = OCR1B;
 682:	8c b5       	in	r24, 0x2c	; 44
 684:	80 93 80 00 	sts	0x0080, r24
	lantern_op_mode = LIGHTING;
}
#endif

#if RUN_CHARGING
while(lantern_op_mode == CHARGING)
 688:	80 91 72 00 	lds	r24, 0x0072
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	c1 f3       	breq	.-16     	; 0x680 <loop+0x4e>
 690:	08 95       	ret

00000692 <main>:
volatile unsigned int battery_current;
uint8_t pwm_value;

int main(void)
{
    setup();
 692:	54 df       	rcall	.-344    	; 0x53c <setup>
	for (;;) 
	{
		loop();
 694:	ce df       	rcall	.-100    	; 0x632 <loop>
 696:	fe cf       	rjmp	.-4      	; 0x694 <main+0x2>

00000698 <__vector_2>:
	}
#endif
}

ISR(PCINT_vect)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25

	if(JACK_PLUGGED_IN_NOW)
 6a6:	b4 9b       	sbis	0x16, 4	; 22
 6a8:	0b c0       	rjmp	.+22     	; 0x6c0 <__vector_2+0x28>
	{
		LED_DISABLE;
 6aa:	c1 98       	cbi	0x18, 1	; 24
		BUTTON_PCI_DISABLE;
 6ac:	82 b5       	in	r24, 0x22	; 34
 6ae:	8e 7f       	andi	r24, 0xFE	; 254
 6b0:	82 bd       	out	0x22, r24	; 34
		jack_needs_debounce = TRUE;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	90 93 76 00 	sts	0x0076, r25
 6ba:	80 93 75 00 	sts	0x0075, r24
 6be:	08 c0       	rjmp	.+16     	; 0x6d0 <__vector_2+0x38>
//		lantern_op_mode = SAFE_OFF;
	}
	else if(JACK_PLUGGED_IN_NOW == 0)
 6c0:	b4 99       	sbic	0x16, 4	; 22
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <__vector_2+0x38>
	{
//		 
		jack_needs_debounce = TRUE;	
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	90 93 76 00 	sts	0x0076, r25
 6cc:	80 93 75 00 	sts	0x0075, r24
	}
	
}
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	0f 90       	pop	r0
 6da:	1f 90       	pop	r1
 6dc:	18 95       	reti

000006de <__divmodhi4>:
 6de:	97 fb       	bst	r25, 7
 6e0:	07 2e       	mov	r0, r23
 6e2:	16 f4       	brtc	.+4      	; 0x6e8 <__divmodhi4+0xa>
 6e4:	00 94       	com	r0
 6e6:	06 d0       	rcall	.+12     	; 0x6f4 <__divmodhi4_neg1>
 6e8:	77 fd       	sbrc	r23, 7
 6ea:	08 d0       	rcall	.+16     	; 0x6fc <__divmodhi4_neg2>
 6ec:	0b d0       	rcall	.+22     	; 0x704 <__udivmodhi4>
 6ee:	07 fc       	sbrc	r0, 7
 6f0:	05 d0       	rcall	.+10     	; 0x6fc <__divmodhi4_neg2>
 6f2:	3e f4       	brtc	.+14     	; 0x702 <__divmodhi4_exit>

000006f4 <__divmodhi4_neg1>:
 6f4:	90 95       	com	r25
 6f6:	81 95       	neg	r24
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	08 95       	ret

000006fc <__divmodhi4_neg2>:
 6fc:	70 95       	com	r23
 6fe:	61 95       	neg	r22
 700:	7f 4f       	sbci	r23, 0xFF	; 255

00000702 <__divmodhi4_exit>:
 702:	08 95       	ret

00000704 <__udivmodhi4>:
 704:	aa 1b       	sub	r26, r26
 706:	bb 1b       	sub	r27, r27
 708:	51 e1       	ldi	r21, 0x11	; 17
 70a:	07 c0       	rjmp	.+14     	; 0x71a <__udivmodhi4_ep>

0000070c <__udivmodhi4_loop>:
 70c:	aa 1f       	adc	r26, r26
 70e:	bb 1f       	adc	r27, r27
 710:	a6 17       	cp	r26, r22
 712:	b7 07       	cpc	r27, r23
 714:	10 f0       	brcs	.+4      	; 0x71a <__udivmodhi4_ep>
 716:	a6 1b       	sub	r26, r22
 718:	b7 0b       	sbc	r27, r23

0000071a <__udivmodhi4_ep>:
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	5a 95       	dec	r21
 720:	a9 f7       	brne	.-22     	; 0x70c <__udivmodhi4_loop>
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	bc 01       	movw	r22, r24
 728:	cd 01       	movw	r24, r26
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
