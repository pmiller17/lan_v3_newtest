
lan_v3_newtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000334  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000090  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000032c  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001c2  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000360  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000010c  00000000  00000000  000013a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ad  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f0  00000000  00000000  0000165d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	2b c1       	rjmp	.+598    	; 0x25c <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	38 c1       	rjmp	.+624    	; 0x288 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	09 d1       	rcall	.+530    	; 0x256 <main>
  44:	2b c1       	rjmp	.+598    	; 0x29c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_read_iled>:
#include "adc.h"
#include "lan.h"

int adc_read_iled()
{
	CFG_ADC_ILED_GAIN_20;
  48:	1b 98       	cbi	0x03, 3	; 3
  4a:	3c 98       	cbi	0x07, 4	; 7
  4c:	3b 9a       	sbi	0x07, 3	; 7
  4e:	3a 9a       	sbi	0x07, 2	; 7
  50:	39 9a       	sbi	0x07, 1	; 7
  52:	38 98       	cbi	0x07, 0	; 7
  54:	1e 9a       	sbi	0x03, 6	; 3
	ADC_TRIGGER_MEASUREMENT;
  56:	36 9a       	sbi	0x06, 6	; 6
  58:	86 b1       	in	r24, 0x06	; 6
//	ADC_TRIGGER_MEASUREMENT;
	
	return ADCH;
  5a:	85 b1       	in	r24, 0x05	; 5
}
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	08 95       	ret

00000060 <debounce_button>:
	JACK_PCI_ENABLE;	//define!
	return jack_plugged_in;
}

int debounce_button(void)
{
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	00 d0       	rcall	.+0      	; 0x66 <debounce_button+0x6>
  66:	cd b7       	in	r28, 0x3d	; 61
  68:	de b7       	in	r29, 0x3e	; 62
	int button_pressed = FALSE;
	volatile int debounce_counter = 0;
  6a:	1a 82       	std	Y+2, r1	; 0x02
  6c:	19 82       	std	Y+1, r1	; 0x01
	
	while(debounce_counter < BUTTON_DELAY_TIME)
  6e:	89 81       	ldd	r24, Y+1	; 0x01
  70:	9a 81       	ldd	r25, Y+2	; 0x02
  72:	80 34       	cpi	r24, 0x40	; 64
  74:	9f 41       	sbci	r25, 0x1F	; 31
  76:	54 f4       	brge	.+20     	; 0x8c <debounce_button+0x2c>
	{
		debounce_counter += 1;
  78:	89 81       	ldd	r24, Y+1	; 0x01
  7a:	9a 81       	ldd	r25, Y+2	; 0x02
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	9a 83       	std	Y+2, r25	; 0x02
  80:	89 83       	std	Y+1, r24	; 0x01
int debounce_button(void)
{
	int button_pressed = FALSE;
	volatile int debounce_counter = 0;
	
	while(debounce_counter < BUTTON_DELAY_TIME)
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	9a 81       	ldd	r25, Y+2	; 0x02
  86:	80 34       	cpi	r24, 0x40	; 64
  88:	9f 41       	sbci	r25, 0x1F	; 31
  8a:	b4 f3       	brlt	.-20     	; 0x78 <debounce_button+0x18>
	{
		debounce_counter += 1;
	}
		
	if (BUTTON_PRESSED_NOW)
  8c:	b0 99       	sbic	0x16, 0	; 22
  8e:	14 c0       	rjmp	.+40     	; 0xb8 <debounce_button+0x58>
	{
		button_pressed = TRUE;
		debounce_counter = 0;
  90:	1a 82       	std	Y+2, r1	; 0x02
  92:	19 82       	std	Y+1, r1	; 0x01
			
		while(debounce_counter < BUTTON_IGNORE_TIME)
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	9a 81       	ldd	r25, Y+2	; 0x02
  98:	88 35       	cpi	r24, 0x58	; 88
  9a:	9b 41       	sbci	r25, 0x1B	; 27
  9c:	84 f4       	brge	.+32     	; 0xbe <debounce_button+0x5e>
		{
			debounce_counter += 1;
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	9a 81       	ldd	r25, Y+2	; 0x02
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9a 83       	std	Y+2, r25	; 0x02
  a6:	89 83       	std	Y+1, r24	; 0x01
	if (BUTTON_PRESSED_NOW)
	{
		button_pressed = TRUE;
		debounce_counter = 0;
			
		while(debounce_counter < BUTTON_IGNORE_TIME)
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	88 35       	cpi	r24, 0x58	; 88
  ae:	9b 41       	sbci	r25, 0x1B	; 27
  b0:	b4 f3       	brlt	.-20     	; 0x9e <debounce_button+0x3e>
		debounce_counter += 1;
	}
		
	if (BUTTON_PRESSED_NOW)
	{
		button_pressed = TRUE;
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <debounce_button+0x62>
			
	}
		
	else
	{
		button_pressed = FALSE;
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <debounce_button+0x62>
		debounce_counter += 1;
	}
		
	if (BUTTON_PRESSED_NOW)
	{
		button_pressed = TRUE;
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		button_pressed = FALSE;
	}
		

	debounce_counter = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_PCI_ENABLE;
  c6:	82 b5       	in	r24, 0x22	; 34
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	82 bd       	out	0x22, r24	; 34
	return button_pressed;
	
}
  cc:	82 2f       	mov	r24, r18
  ce:	93 2f       	mov	r25, r19
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <setup>:
}


void setup(void)
{
	cli();
  da:	f8 94       	cli

    int i;
	for(i = 0; i <= 7; i++)
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PCMSK0,i);
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	63 b5       	in	r22, 0x23	; 35
  e6:	9a 01       	movw	r18, r20
  e8:	08 2e       	mov	r0, r24
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <setup+0x16>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <setup+0x12>
  f4:	20 95       	com	r18
  f6:	32 2f       	mov	r19, r18
  f8:	36 23       	and	r19, r22
  fa:	33 bd       	out	0x23, r19	; 35
		CLRBIT(PCMSK1,i);
  fc:	32 b5       	in	r19, 0x22	; 34
  fe:	23 23       	and	r18, r19
 100:	22 bd       	out	0x22, r18	; 34
void setup(void)
{
	cli();

    int i;
	for(i = 0; i <= 7; i++)
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	88 30       	cpi	r24, 0x08	; 8
 106:	91 05       	cpc	r25, r1
 108:	69 f7       	brne	.-38     	; 0xe4 <setup+0xa>
		CLRBIT(PCMSK0,i);
		CLRBIT(PCMSK1,i);
	}
  
    /*  Enable the PLL.  */
    ENABLE_PLL;
 10a:	89 b5       	in	r24, 0x29	; 41
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	89 bd       	out	0x29, r24	; 41
    while(PLL_IS_NOT_LOCKED)
 110:	09 b4       	in	r0, 0x29	; 41
 112:	00 fe       	sbrs	r0, 0
 114:	fd cf       	rjmp	.-6      	; 0x110 <setup+0x36>
    {
        // Waiting for PLOCK bit to be set
    }
    ENABLE_PCK;
 116:	89 b5       	in	r24, 0x29	; 41
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	89 bd       	out	0x29, r24	; 41

    /*  Use a prescaler of 16 to set the system clock at 500 kHz (1 MHz?).
    */
    SET_SYS_CLK;
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	88 bd       	out	0x28, r24	; 40
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	88 bd       	out	0x28, r24	; 40

    /*  IO Configurations
    */
	CFG_IO_BUTTON;		
 124:	b8 98       	cbi	0x17, 0	; 23
 126:	c0 9a       	sbi	0x18, 0	; 24
	CFG_IO_LED_ENABLE;	
 128:	b9 9a       	sbi	0x17, 1	; 23
 12a:	c1 98       	cbi	0x18, 1	; 24
    CFG_IO_PWM;			
 12c:	bb 9a       	sbi	0x17, 3	; 23
 12e:	c3 98       	cbi	0x18, 3	; 24
    
    /*  Clock 1 (PWM clock) Configurations
        Use PLL to set clock 1 at 64 MHz, asynchronous from the system clock.
        Use a prescaler of 4 and a TOP value of 256 to have FPWM frequency at 62.5 kHz.
    */
    CFG_PWM;
 130:	80 b7       	in	r24, 0x30	; 48
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	80 bf       	out	0x30, r24	; 48
 136:	80 b7       	in	r24, 0x30	; 48
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	80 bf       	out	0x30, r24	; 48
 13c:	80 b7       	in	r24, 0x30	; 48
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 bf       	out	0x30, r24	; 48
 142:	86 b5       	in	r24, 0x26	; 38
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	86 bd       	out	0x26, r24	; 38
 148:	86 b5       	in	r24, 0x26	; 38
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	86 bd       	out	0x26, r24	; 38
    FPWM_NORMAL_PORT_OP;
 14e:	80 b7       	in	r24, 0x30	; 48
 150:	8f 7d       	andi	r24, 0xDF	; 223
 152:	80 bf       	out	0x30, r24	; 48
    TURN_OFF_PWM_CLK;
 154:	8f b5       	in	r24, 0x2f	; 47
 156:	87 7f       	andi	r24, 0xF7	; 247
 158:	8f bd       	out	0x2f, r24	; 47
 15a:	8f b5       	in	r24, 0x2f	; 47
 15c:	8b 7f       	andi	r24, 0xFB	; 251
 15e:	8f bd       	out	0x2f, r24	; 47
 160:	8f b5       	in	r24, 0x2f	; 47
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	8f bd       	out	0x2f, r24	; 47
 166:	8f b5       	in	r24, 0x2f	; 47
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	8f bd       	out	0x2f, r24	; 47
	OCR1C = 255;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	8b bd       	out	0x2b, r24	; 43
    OCR1B = 0;
 170:	1c bc       	out	0x2c, r1	; 44
		
    CFG_ADC;
 172:	3f 98       	cbi	0x07, 7	; 7
 174:	3e 9a       	sbi	0x07, 6	; 7
 176:	3d 9a       	sbi	0x07, 5	; 7

    ADC_ENABLE;
 178:	37 9a       	sbi	0x06, 7	; 6
    ADC_ISR_ENABLE;
 17a:	33 9a       	sbi	0x06, 3	; 6
    
    LED_ENABLE;
 17c:	c1 9a       	sbi	0x18, 1	; 24

	PCI_ENABLE;
 17e:	8b b7       	in	r24, 0x3b	; 59
 180:	80 62       	ori	r24, 0x20	; 32
 182:	8b bf       	out	0x3b, r24	; 59
 184:	8b b7       	in	r24, 0x3b	; 59
 186:	80 61       	ori	r24, 0x10	; 16
 188:	8b bf       	out	0x3b, r24	; 59
	BUTTON_PCI_ENABLE;
 18a:	82 b5       	in	r24, 0x22	; 34
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	82 bd       	out	0x22, r24	; 34
	
	FPWM_CLR_COMP_MATCH;
 190:	80 b7       	in	r24, 0x30	; 48
 192:	80 62       	ori	r24, 0x20	; 32
 194:	80 bf       	out	0x30, r24	; 48
	TURN_ON_PWM_CLK;
 196:	8f b5       	in	r24, 0x2f	; 47
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	8f bd       	out	0x2f, r24	; 47
 19c:	8f b5       	in	r24, 0x2f	; 47
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	8f bd       	out	0x2f, r24	; 47
 1a2:	8f b5       	in	r24, 0x2f	; 47
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	8f bd       	out	0x2f, r24	; 47
 1a8:	8f b5       	in	r24, 0x2f	; 47
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	8f bd       	out	0x2f, r24	; 47
	
    sei();
 1ae:	78 94       	sei
 1b0:	08 95       	ret

000001b2 <loop>:
void loop(void) 
{


	
	if(needs_debounce)
 1b2:	80 91 64 00 	lds	r24, 0x0064
 1b6:	90 91 65 00 	lds	r25, 0x0065
 1ba:	89 2b       	or	r24, r25
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <loop+0x1e>
	{
		button_state = debounce_button();
 1be:	50 df       	rcall	.-352    	; 0x60 <debounce_button>
 1c0:	90 93 63 00 	sts	0x0063, r25
 1c4:	80 93 62 00 	sts	0x0062, r24
		needs_debounce = FALSE;
 1c8:	10 92 65 00 	sts	0x0065, r1
 1cc:	10 92 64 00 	sts	0x0064, r1
	}

	//target 102
	
	if(button_state == TRUE)
 1d0:	80 91 62 00 	lds	r24, 0x0062
 1d4:	90 91 63 00 	lds	r25, 0x0063
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	01 f5       	brne	.+64     	; 0x21c <loop+0x6a>
	{
		if(light_on == TRUE)
 1dc:	80 91 60 00 	lds	r24, 0x0060
 1e0:	90 91 61 00 	lds	r25, 0x0061
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	51 f4       	brne	.+20     	; 0x1fc <loop+0x4a>
		{
			OCR1B = 0;
 1e8:	1c bc       	out	0x2c, r1	; 44
			light_on = FALSE;
 1ea:	10 92 61 00 	sts	0x0061, r1
 1ee:	10 92 60 00 	sts	0x0060, r1
			button_state = FALSE;
 1f2:	10 92 63 00 	sts	0x0063, r1
 1f6:	10 92 62 00 	sts	0x0062, r1
 1fa:	10 c0       	rjmp	.+32     	; 0x21c <loop+0x6a>
		}
		
		else
		{
			target_pwm = 61;
 1fc:	8d e3       	ldi	r24, 0x3D	; 61
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 69 00 	sts	0x0069, r25
 204:	80 93 68 00 	sts	0x0068, r24
			light_on = TRUE;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 61 00 	sts	0x0061, r25
 210:	80 93 60 00 	sts	0x0060, r24
			button_state = FALSE;
 214:	10 92 63 00 	sts	0x0063, r1
 218:	10 92 62 00 	sts	0x0062, r1
		}
	}
	if(light_on == TRUE)
 21c:	80 91 60 00 	lds	r24, 0x0060
 220:	90 91 61 00 	lds	r25, 0x0061
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	b1 f4       	brne	.+44     	; 0x254 <loop+0xa2>
	{
		adc_result = adc_read_iled();
 228:	0f df       	rcall	.-482    	; 0x48 <adc_read_iled>
 22a:	90 93 67 00 	sts	0x0067, r25
 22e:	80 93 66 00 	sts	0x0066, r24
		if(adc_result < target_pwm)
 232:	20 91 68 00 	lds	r18, 0x0068
 236:	30 91 69 00 	lds	r19, 0x0069
 23a:	82 17       	cp	r24, r18
 23c:	93 07       	cpc	r25, r19
 23e:	24 f4       	brge	.+8      	; 0x248 <loop+0x96>
		{
			OCR1B++;
 240:	8c b5       	in	r24, 0x2c	; 44
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	8c bd       	out	0x2c, r24	; 44
 246:	08 95       	ret
		}
		else if(adc_result > target_pwm)
 248:	28 17       	cp	r18, r24
 24a:	39 07       	cpc	r19, r25
 24c:	1c f4       	brge	.+6      	; 0x254 <loop+0xa2>
		{
			OCR1B--;
 24e:	8c b5       	in	r24, 0x2c	; 44
 250:	81 50       	subi	r24, 0x01	; 1
 252:	8c bd       	out	0x2c, r24	; 44
 254:	08 95       	ret

00000256 <main>:
int light_on = FALSE;
static int glitch_counter = 0;

int main(void)
{
    setup();
 256:	41 df       	rcall	.-382    	; 0xda <setup>
	for (;;) 
	{
		loop();
 258:	ac df       	rcall	.-168    	; 0x1b2 <loop>
 25a:	fe cf       	rjmp	.-4      	; 0x258 <main+0x2>

0000025c <__vector_2>:
		}
	}
}

ISR(PCINT_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25

	if(BUTTON_PRESSED_NOW)
 26a:	b0 99       	sbic	0x16, 0	; 22
 26c:	06 c0       	rjmp	.+12     	; 0x27a <__vector_2+0x1e>
	{
		needs_debounce = TRUE;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 65 00 	sts	0x0065, r25
 276:	80 93 64 00 	sts	0x0064, r24
	}
	
}
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_11>:

ISR(ADC_vect)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
	;
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
