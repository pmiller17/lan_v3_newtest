
lan_v3_newtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001dc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ad  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028d  00000000  00000000  0000090d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000430  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a4  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

void charge_battery(void)
{
	
	switch(charging_mode)
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	bc c0       	rjmp	.+376    	; 0x17e <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
	{

		case CONSTANT_CURRENT:
			
			battery_current = adc_read_ibatt();
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	d6 c0       	rjmp	.+428    	; 0x1c4 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
			battery_voltage = adc_read_vbatt();
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
			current_offset = battery_current/32;
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	9a d0       	rcall	.+308    	; 0x178 <main>
  44:	c9 c0       	rjmp	.+402    	; 0x1d8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_read_vbatt>:
  48:	1b 98       	cbi	0x03, 3	; 3
  4a:	3c 9a       	sbi	0x07, 4	; 7
  4c:	3b 98       	cbi	0x07, 3	; 7
  4e:	3a 98       	cbi	0x07, 2	; 7
  50:	39 9a       	sbi	0x07, 1	; 7
			
			if(battery_current < 242)
  52:	38 9a       	sbi	0x07, 0	; 7
  54:	1e 98       	cbi	0x03, 6	; 3
  56:	36 9a       	sbi	0x06, 6	; 6
  58:	86 b1       	in	r24, 0x06	; 6
  5a:	36 9a       	sbi	0x06, 6	; 6
  5c:	86 b1       	in	r24, 0x06	; 6
  5e:	85 b1       	in	r24, 0x05	; 5
			{
				OCR1B++;
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	08 95       	ret

00000064 <adc_read_ibatt>:
  64:	1b 9a       	sbi	0x03, 3	; 3
  66:	3c 98       	cbi	0x07, 4	; 7
			}
			else if(battery_current > 245)
  68:	3b 98       	cbi	0x07, 3	; 7
  6a:	3a 98       	cbi	0x07, 2	; 7
  6c:	39 9a       	sbi	0x07, 1	; 7
  6e:	38 98       	cbi	0x07, 0	; 7
  70:	1e 9a       	sbi	0x03, 6	; 3
  72:	36 9a       	sbi	0x06, 6	; 6
  74:	86 b1       	in	r24, 0x06	; 6
			{
				OCR1B--;
  76:	36 9a       	sbi	0x06, 6	; 6
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	85 b1       	in	r24, 0x05	; 5
			}
		
			if(battery_current >= 242)
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	08 95       	ret

00000080 <setup>:
  80:	f8 94       	cli
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	50 e0       	ldi	r21, 0x00	; 0
			{			
				enough_bulk_current_counter++;
  8a:	63 b5       	in	r22, 0x23	; 35
  8c:	9a 01       	movw	r18, r20
  8e:	08 2e       	mov	r0, r24
  90:	02 c0       	rjmp	.+4      	; 0x96 <setup+0x16>
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <setup+0x12>
  9a:	20 95       	com	r18
  9c:	32 2f       	mov	r19, r18
  9e:	36 23       	and	r19, r22
  a0:	33 bd       	out	0x23, r19	; 35
  a2:	32 b5       	in	r19, 0x22	; 34
  a4:	23 23       	and	r18, r19
  a6:	22 bd       	out	0x22, r18	; 34
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	91 05       	cpc	r25, r1
  ae:	69 f7       	brne	.-38     	; 0x8a <setup+0xa>
				if(enough_bulk_current_counter > 2000)
  b0:	89 b5       	in	r24, 0x29	; 41
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	89 bd       	out	0x29, r24	; 41
  b6:	09 b4       	in	r0, 0x29	; 41
  b8:	00 fe       	sbrs	r0, 0
				{
					bulk_charge_reached = TRUE;
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <setup+0x36>
  bc:	89 b5       	in	r24, 0x29	; 41
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	89 bd       	out	0x29, r24	; 41
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	88 bd       	out	0x28, r24	; 40
				}
			}
		
			if((battery_current < 234) & (battery_current > 0))
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	88 bd       	out	0x28, r24	; 40
  ca:	b8 98       	cbi	0x17, 0	; 23
  cc:	c0 9a       	sbi	0x18, 0	; 24
  ce:	b9 9a       	sbi	0x17, 1	; 23
  d0:	c1 98       	cbi	0x18, 1	; 24
  d2:	bc 98       	cbi	0x17, 4	; 23
  d4:	c4 98       	cbi	0x18, 4	; 24
  d6:	bb 9a       	sbi	0x17, 3	; 23
  d8:	c3 98       	cbi	0x18, 3	; 24
  da:	80 b7       	in	r24, 0x30	; 48
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	80 bf       	out	0x30, r24	; 48
  e0:	80 b7       	in	r24, 0x30	; 48
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	80 bf       	out	0x30, r24	; 48
  e6:	80 b7       	in	r24, 0x30	; 48
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 bf       	out	0x30, r24	; 48
  ec:	86 b5       	in	r24, 0x26	; 38
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	86 bd       	out	0x26, r24	; 38
			{
				enough_bulk_current_counter = 0;
  f2:	86 b5       	in	r24, 0x26	; 38
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	86 bd       	out	0x26, r24	; 38
  f8:	80 b7       	in	r24, 0x30	; 48
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	80 bf       	out	0x30, r24	; 48
  fe:	8f b5       	in	r24, 0x2f	; 47
 100:	87 7f       	andi	r24, 0xF7	; 247
			}
			
			if(bulk_charge_reached == TRUE)
 102:	8f bd       	out	0x2f, r24	; 47
 104:	8f b5       	in	r24, 0x2f	; 47
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	8f bd       	out	0x2f, r24	; 47
 10a:	8f b5       	in	r24, 0x2f	; 47
 10c:	8d 7f       	andi	r24, 0xFD	; 253
			{
				if(battery_voltage - current_offset > 220)
 10e:	8f bd       	out	0x2f, r24	; 47
 110:	8f b5       	in	r24, 0x2f	; 47
 112:	8e 7f       	andi	r24, 0xFE	; 254
 114:	8f bd       	out	0x2f, r24	; 47
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8b bd       	out	0x2b, r24	; 43
 11a:	1c bc       	out	0x2c, r1	; 44
 11c:	3f 98       	cbi	0x07, 7	; 7
 11e:	3e 9a       	sbi	0x07, 6	; 7
 120:	3d 9a       	sbi	0x07, 5	; 7
 122:	37 9a       	sbi	0x06, 7	; 6
 124:	33 9a       	sbi	0x06, 3	; 6
 126:	c1 9a       	sbi	0x18, 1	; 24
				{
					overvoltage_thresh_count++;
 128:	8b b7       	in	r24, 0x3b	; 59
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	8b bf       	out	0x3b, r24	; 59
 12e:	8b b7       	in	r24, 0x3b	; 59
 130:	80 61       	ori	r24, 0x10	; 16
 132:	8b bf       	out	0x3b, r24	; 59
 134:	82 b5       	in	r24, 0x22	; 34
 136:	81 60       	ori	r24, 0x01	; 1
 138:	82 bd       	out	0x22, r24	; 34
 13a:	82 b5       	in	r24, 0x22	; 34
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	82 bd       	out	0x22, r24	; 34
 140:	80 b7       	in	r24, 0x30	; 48
 142:	80 62       	ori	r24, 0x20	; 32
 144:	80 bf       	out	0x30, r24	; 48
 146:	8f b5       	in	r24, 0x2f	; 47
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	8f bd       	out	0x2f, r24	; 47
 14c:	8f b5       	in	r24, 0x2f	; 47
				}
			
				if(battery_voltage - current_offset < 220)
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	8f bd       	out	0x2f, r24	; 47
 152:	8f b5       	in	r24, 0x2f	; 47
 154:	82 60       	ori	r24, 0x02	; 2
 156:	8f bd       	out	0x2f, r24	; 47
 158:	8f b5       	in	r24, 0x2f	; 47
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	8f bd       	out	0x2f, r24	; 47
 15e:	78 94       	sei
				{
					overvoltage_thresh_count = 0;
 160:	08 95       	ret

00000162 <loop>:
 162:	80 df       	rcall	.-256    	; 0x64 <adc_read_ibatt>
 164:	90 93 61 00 	sts	0x0061, r25
 168:	80 93 60 00 	sts	0x0060, r24
 16c:	6d df       	rcall	.-294    	; 0x48 <adc_read_vbatt>
 16e:	90 93 63 00 	sts	0x0063, r25
				}
			}
		
			if(overvoltage_thresh_count >= 2000)
 172:	80 93 62 00 	sts	0x0062, r24
 176:	08 95       	ret

00000178 <main>:
 178:	83 df       	rcall	.-250    	; 0x80 <setup>
 17a:	f3 df       	rcall	.-26     	; 0x162 <loop>
 17c:	fe cf       	rjmp	.-4      	; 0x17a <main+0x2>

0000017e <__vector_2>:
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	b4 9b       	sbis	0x16, 4	; 22
			{
				charging_mode = CONSTANT_VOLTAGE;
 18e:	0b c0       	rjmp	.+22     	; 0x1a6 <__vector_2+0x28>
 190:	c1 98       	cbi	0x18, 1	; 24
 192:	82 b5       	in	r24, 0x22	; 34
 194:	8e 7f       	andi	r24, 0xFE	; 254
			
		break;

		case CONSTANT_VOLTAGE:
			
			battery_voltage = adc_read_vbatt();
 196:	82 bd       	out	0x22, r24	; 34
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 65 00 	sts	0x0065, r25
			battery_current = adc_read_ibatt();
 1a0:	80 93 64 00 	sts	0x0064, r24
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <__vector_2+0x38>
 1a6:	b4 99       	sbic	0x16, 4	; 22
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <__vector_2+0x38>
			current_offset = battery_current/32;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 65 00 	sts	0x0065, r25
 1b2:	80 93 64 00 	sts	0x0064, r24
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_11>:
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
			
			if(battery_voltage - current_offset > 220)
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
