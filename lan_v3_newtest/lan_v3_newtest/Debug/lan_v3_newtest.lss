
lan_v3_newtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  00000774  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b7  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029e  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000469  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a4  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	3e c3       	rjmp	.+1660   	; 0x682 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	58 c3       	rjmp	.+1712   	; 0x6c8 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 38       	cpi	r26, 0x80	; 128
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1c d3       	rcall	.+1592   	; 0x67c <main>
  44:	4b c3       	rjmp	.+1686   	; 0x6dc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_read_vbatt>:
	return ADCH;
}

unsigned int adc_read_vbatt(void)
{	
	CFG_ADC_VBATT_GAIN_1;
  48:	1b 98       	cbi	0x03, 3	; 3
  4a:	3c 9a       	sbi	0x07, 4	; 7
  4c:	3b 98       	cbi	0x07, 3	; 7
  4e:	3a 98       	cbi	0x07, 2	; 7
  50:	39 9a       	sbi	0x07, 1	; 7
  52:	38 9a       	sbi	0x07, 0	; 7
  54:	1e 98       	cbi	0x03, 6	; 3
	ADC_TRIGGER_MEASUREMENT;
  56:	36 9a       	sbi	0x06, 6	; 6
  58:	36 99       	sbic	0x06, 6	; 6
  5a:	fe cf       	rjmp	.-4      	; 0x58 <adc_read_vbatt+0x10>
	return ADCH;
  5c:	85 b1       	in	r24, 0x05	; 5
}
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	08 95       	ret

00000062 <adc_read_ibatt>:

unsigned int adc_read_ibatt(void)
{
	CFG_ADC_IBATT_GAIN_32;
  62:	1b 9a       	sbi	0x03, 3	; 3
  64:	3c 98       	cbi	0x07, 4	; 7
  66:	3b 98       	cbi	0x07, 3	; 7
  68:	3a 98       	cbi	0x07, 2	; 7
  6a:	39 9a       	sbi	0x07, 1	; 7
  6c:	38 98       	cbi	0x07, 0	; 7
  6e:	1e 9a       	sbi	0x03, 6	; 3
	ADC_TRIGGER_MEASUREMENT;
  70:	36 9a       	sbi	0x06, 6	; 6
  72:	36 99       	sbic	0x06, 6	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <adc_read_ibatt+0x10>
	return ADCH;
  76:	85 b1       	in	r24, 0x05	; 5
	
}
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	08 95       	ret

0000007c <initialize_charge>:
volatile int battery_voltage;
volatile int battery_current;

void initialize_charge(void)
{
	overvoltage_thresh_count = 0;
  7c:	10 92 7b 00 	sts	0x007B, r1
  80:	10 92 7c 00 	sts	0x007C, r1
  84:	10 92 7d 00 	sts	0x007D, r1
  88:	10 92 7e 00 	sts	0x007E, r1
	enough_bulk_current_counter = 0;
  8c:	10 92 6e 00 	sts	0x006E, r1
  90:	10 92 6f 00 	sts	0x006F, r1
  94:	10 92 70 00 	sts	0x0070, r1
  98:	10 92 71 00 	sts	0x0071, r1
	bulk_charge_reached = FALSE;
  9c:	10 92 6d 00 	sts	0x006D, r1
  a0:	10 92 6c 00 	sts	0x006C, r1
	trickle_charge = 0;
  a4:	10 92 68 00 	sts	0x0068, r1
  a8:	10 92 69 00 	sts	0x0069, r1
  ac:	10 92 6a 00 	sts	0x006A, r1
  b0:	10 92 6b 00 	sts	0x006B, r1
	not_enough_volts = 0;
  b4:	10 92 64 00 	sts	0x0064, r1
  b8:	10 92 65 00 	sts	0x0065, r1
  bc:	10 92 66 00 	sts	0x0066, r1
  c0:	10 92 67 00 	sts	0x0067, r1
	go_back_bulk = FALSE;
  c4:	10 92 63 00 	sts	0x0063, r1
  c8:	10 92 62 00 	sts	0x0062, r1
	current_offset = 0;
  cc:	10 92 61 00 	sts	0x0061, r1
  d0:	10 92 60 00 	sts	0x0060, r1
	battery_current = 0;
  d4:	10 92 78 00 	sts	0x0078, r1
  d8:	10 92 77 00 	sts	0x0077, r1
	battery_voltage = 0;
  dc:	10 92 7a 00 	sts	0x007A, r1
  e0:	10 92 79 00 	sts	0x0079, r1
	OCR1B = 0;
  e4:	1c bc       	out	0x2c, r1	; 44
	
	charging_mode = CONSTANT_CURRENT;
  e6:	10 92 7f 00 	sts	0x007F, r1
			
	ADC_ENABLE;
  ea:	37 9a       	sbi	0x06, 7	; 6
	ADC_ISR_ENABLE;
  ec:	33 9a       	sbi	0x06, 3	; 6
	FPWM_CLR_COMP_MATCH;
  ee:	80 b7       	in	r24, 0x30	; 48
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	80 bf       	out	0x30, r24	; 48
	TURN_ON_PWM_CLK;
  f4:	8f b5       	in	r24, 0x2f	; 47
  f6:	87 7f       	andi	r24, 0xF7	; 247
  f8:	8f bd       	out	0x2f, r24	; 47
  fa:	8f b5       	in	r24, 0x2f	; 47
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	8f bd       	out	0x2f, r24	; 47
 100:	8f b5       	in	r24, 0x2f	; 47
 102:	82 60       	ori	r24, 0x02	; 2
 104:	8f bd       	out	0x2f, r24	; 47
 106:	8f b5       	in	r24, 0x2f	; 47
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	8f bd       	out	0x2f, r24	; 47
 10c:	08 95       	ret

0000010e <charge_battery>:
}

void charge_battery(void)
{
	
	switch(charging_mode)
 10e:	80 91 7f 00 	lds	r24, 0x007F
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	09 f4       	brne	.+2      	; 0x118 <charge_battery+0xa>
 116:	c6 c0       	rjmp	.+396    	; 0x2a4 <__stack+0x145>
 118:	20 f0       	brcs	.+8      	; 0x122 <charge_battery+0x14>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	09 f4       	brne	.+2      	; 0x120 <charge_battery+0x12>
 11e:	8e c1       	rjmp	.+796    	; 0x43c <__stack+0x2dd>
 120:	08 95       	ret
	{

		case CONSTANT_CURRENT:
			
			battery_current = adc_read_ibatt();
 122:	9f df       	rcall	.-194    	; 0x62 <adc_read_ibatt>
 124:	90 93 78 00 	sts	0x0078, r25
 128:	80 93 77 00 	sts	0x0077, r24
			battery_voltage = adc_read_vbatt();
 12c:	8d df       	rcall	.-230    	; 0x48 <adc_read_vbatt>
 12e:	90 93 7a 00 	sts	0x007A, r25
 132:	80 93 79 00 	sts	0x0079, r24
			current_offset = battery_current/32;
 136:	80 91 77 00 	lds	r24, 0x0077
 13a:	90 91 78 00 	lds	r25, 0x0078
 13e:	99 23       	and	r25, r25
 140:	0c f4       	brge	.+2      	; 0x144 <charge_battery+0x36>
 142:	4f 96       	adiw	r24, 0x1f	; 31
 144:	95 95       	asr	r25
 146:	87 95       	ror	r24
 148:	95 95       	asr	r25
 14a:	87 95       	ror	r24
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	95 95       	asr	r25
 152:	87 95       	ror	r24
 154:	95 95       	asr	r25
 156:	87 95       	ror	r24
 158:	90 93 61 00 	sts	0x0061, r25
 15c:	80 93 60 00 	sts	0x0060, r24
			
			if(battery_current < 242)
 160:	80 91 77 00 	lds	r24, 0x0077
 164:	90 91 78 00 	lds	r25, 0x0078
 168:	82 3f       	cpi	r24, 0xF2	; 242
 16a:	91 05       	cpc	r25, r1
 16c:	24 f4       	brge	.+8      	; 0x176 <__stack+0x17>
			{
				OCR1B++;
 16e:	8c b5       	in	r24, 0x2c	; 44
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	8c bd       	out	0x2c, r24	; 44
 174:	0a c0       	rjmp	.+20     	; 0x18a <__stack+0x2b>
			}
			else if(battery_current > 245)
 176:	80 91 77 00 	lds	r24, 0x0077
 17a:	90 91 78 00 	lds	r25, 0x0078
 17e:	86 3f       	cpi	r24, 0xF6	; 246
 180:	91 05       	cpc	r25, r1
 182:	1c f0       	brlt	.+6      	; 0x18a <__stack+0x2b>
			{
				OCR1B--;
 184:	8c b5       	in	r24, 0x2c	; 44
 186:	81 50       	subi	r24, 0x01	; 1
 188:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_current >= 242)
 18a:	80 91 77 00 	lds	r24, 0x0077
 18e:	90 91 78 00 	lds	r25, 0x0078
 192:	82 3f       	cpi	r24, 0xF2	; 242
 194:	91 05       	cpc	r25, r1
 196:	f4 f0       	brlt	.+60     	; 0x1d4 <__stack+0x75>
			{			
				enough_bulk_current_counter++;
 198:	80 91 6e 00 	lds	r24, 0x006E
 19c:	90 91 6f 00 	lds	r25, 0x006F
 1a0:	a0 91 70 00 	lds	r26, 0x0070
 1a4:	b0 91 71 00 	lds	r27, 0x0071
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	a1 1d       	adc	r26, r1
 1ac:	b1 1d       	adc	r27, r1
 1ae:	80 93 6e 00 	sts	0x006E, r24
 1b2:	90 93 6f 00 	sts	0x006F, r25
 1b6:	a0 93 70 00 	sts	0x0070, r26
 1ba:	b0 93 71 00 	sts	0x0071, r27
				if(enough_bulk_current_counter > 2000)
 1be:	81 3d       	cpi	r24, 0xD1	; 209
 1c0:	97 40       	sbci	r25, 0x07	; 7
 1c2:	a1 05       	cpc	r26, r1
 1c4:	b1 05       	cpc	r27, r1
 1c6:	30 f0       	brcs	.+12     	; 0x1d4 <__stack+0x75>
				{
					bulk_charge_reached = TRUE;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 6d 00 	sts	0x006D, r25
 1d0:	80 93 6c 00 	sts	0x006C, r24
				}
			}
		
			if((battery_current < 234) & (battery_current > 0))
 1d4:	20 91 77 00 	lds	r18, 0x0077
 1d8:	30 91 78 00 	lds	r19, 0x0078
 1dc:	80 91 77 00 	lds	r24, 0x0077
 1e0:	90 91 78 00 	lds	r25, 0x0078
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	18 16       	cp	r1, r24
 1e8:	19 06       	cpc	r1, r25
 1ea:	0c f0       	brlt	.+2      	; 0x1ee <__stack+0x8f>
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	44 23       	and	r20, r20
 1f0:	79 f0       	breq	.+30     	; 0x210 <__stack+0xb1>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	2a 3e       	cpi	r18, 0xEA	; 234
 1f6:	31 05       	cpc	r19, r1
 1f8:	0c f0       	brlt	.+2      	; 0x1fc <__stack+0x9d>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	88 23       	and	r24, r24
 1fe:	41 f0       	breq	.+16     	; 0x210 <__stack+0xb1>
			{
				enough_bulk_current_counter = 0;
 200:	10 92 6e 00 	sts	0x006E, r1
 204:	10 92 6f 00 	sts	0x006F, r1
 208:	10 92 70 00 	sts	0x0070, r1
 20c:	10 92 71 00 	sts	0x0071, r1
			}
			
			if(bulk_charge_reached == TRUE)
 210:	80 91 6c 00 	lds	r24, 0x006C
 214:	90 91 6d 00 	lds	r25, 0x006D
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	91 f5       	brne	.+100    	; 0x280 <__stack+0x121>
			{
				if(battery_voltage - current_offset > 220)
 21c:	80 91 79 00 	lds	r24, 0x0079
 220:	90 91 7a 00 	lds	r25, 0x007A
 224:	20 91 60 00 	lds	r18, 0x0060
 228:	30 91 61 00 	lds	r19, 0x0061
 22c:	82 1b       	sub	r24, r18
 22e:	93 0b       	sbc	r25, r19
 230:	8d 3d       	cpi	r24, 0xDD	; 221
 232:	91 05       	cpc	r25, r1
 234:	98 f0       	brcs	.+38     	; 0x25c <__stack+0xfd>
				{
					overvoltage_thresh_count++;
 236:	80 91 7b 00 	lds	r24, 0x007B
 23a:	90 91 7c 00 	lds	r25, 0x007C
 23e:	a0 91 7d 00 	lds	r26, 0x007D
 242:	b0 91 7e 00 	lds	r27, 0x007E
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	a1 1d       	adc	r26, r1
 24a:	b1 1d       	adc	r27, r1
 24c:	80 93 7b 00 	sts	0x007B, r24
 250:	90 93 7c 00 	sts	0x007C, r25
 254:	a0 93 7d 00 	sts	0x007D, r26
 258:	b0 93 7e 00 	sts	0x007E, r27
				}
			
				if(battery_voltage - current_offset < 220)
 25c:	80 91 79 00 	lds	r24, 0x0079
 260:	90 91 7a 00 	lds	r25, 0x007A
 264:	82 1b       	sub	r24, r18
 266:	93 0b       	sbc	r25, r19
 268:	8c 3d       	cpi	r24, 0xDC	; 220
 26a:	91 05       	cpc	r25, r1
 26c:	48 f4       	brcc	.+18     	; 0x280 <__stack+0x121>
				{
					overvoltage_thresh_count = 0;
 26e:	10 92 7b 00 	sts	0x007B, r1
 272:	10 92 7c 00 	sts	0x007C, r1
 276:	10 92 7d 00 	sts	0x007D, r1
 27a:	10 92 7e 00 	sts	0x007E, r1
 27e:	08 95       	ret
				}
			}
		
			if(overvoltage_thresh_count >= 2000)
 280:	80 91 7b 00 	lds	r24, 0x007B
 284:	90 91 7c 00 	lds	r25, 0x007C
 288:	a0 91 7d 00 	lds	r26, 0x007D
 28c:	b0 91 7e 00 	lds	r27, 0x007E
 290:	80 3d       	cpi	r24, 0xD0	; 208
 292:	97 40       	sbci	r25, 0x07	; 7
 294:	a1 05       	cpc	r26, r1
 296:	b1 05       	cpc	r27, r1
 298:	08 f4       	brcc	.+2      	; 0x29c <__stack+0x13d>
 29a:	09 c1       	rjmp	.+530    	; 0x4ae <__stack+0x34f>
			{
				charging_mode = CONSTANT_VOLTAGE;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 7f 00 	sts	0x007F, r24
 2a2:	08 95       	ret
			
		break;

		case CONSTANT_VOLTAGE:
			
			battery_voltage = adc_read_vbatt();
 2a4:	d1 de       	rcall	.-606    	; 0x48 <adc_read_vbatt>
 2a6:	90 93 7a 00 	sts	0x007A, r25
 2aa:	80 93 79 00 	sts	0x0079, r24
			battery_current = adc_read_ibatt();
 2ae:	d9 de       	rcall	.-590    	; 0x62 <adc_read_ibatt>
 2b0:	90 93 78 00 	sts	0x0078, r25
 2b4:	80 93 77 00 	sts	0x0077, r24
			current_offset = battery_current/32;
 2b8:	80 91 77 00 	lds	r24, 0x0077
 2bc:	90 91 78 00 	lds	r25, 0x0078
 2c0:	99 23       	and	r25, r25
 2c2:	0c f4       	brge	.+2      	; 0x2c6 <__stack+0x167>
 2c4:	4f 96       	adiw	r24, 0x1f	; 31
 2c6:	95 95       	asr	r25
 2c8:	87 95       	ror	r24
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	95 95       	asr	r25
 2d0:	87 95       	ror	r24
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	90 93 61 00 	sts	0x0061, r25
 2de:	80 93 60 00 	sts	0x0060, r24
			
			if(battery_voltage - current_offset > 220)
 2e2:	20 91 79 00 	lds	r18, 0x0079
 2e6:	30 91 7a 00 	lds	r19, 0x007A
 2ea:	28 1b       	sub	r18, r24
 2ec:	39 0b       	sbc	r19, r25
 2ee:	2d 3d       	cpi	r18, 0xDD	; 221
 2f0:	31 05       	cpc	r19, r1
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__stack+0x19d>
			{
				OCR1B -= 1;
 2f4:	8c b5       	in	r24, 0x2c	; 44
 2f6:	81 50       	subi	r24, 0x01	; 1
 2f8:	8c bd       	out	0x2c, r24	; 44
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <__stack+0x1b7>
			}
		
			else if(battery_voltage - current_offset < 220)
 2fc:	20 91 79 00 	lds	r18, 0x0079
 300:	30 91 7a 00 	lds	r19, 0x007A
 304:	a9 01       	movw	r20, r18
 306:	48 1b       	sub	r20, r24
 308:	59 0b       	sbc	r21, r25
 30a:	4c 3d       	cpi	r20, 0xDC	; 220
 30c:	51 05       	cpc	r21, r1
 30e:	18 f4       	brcc	.+6      	; 0x316 <__stack+0x1b7>
			{
				OCR1B += 3;
 310:	8c b5       	in	r24, 0x2c	; 44
 312:	8d 5f       	subi	r24, 0xFD	; 253
 314:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_voltage - current_offset < 208)
 316:	80 91 79 00 	lds	r24, 0x0079
 31a:	90 91 7a 00 	lds	r25, 0x007A
 31e:	20 91 60 00 	lds	r18, 0x0060
 322:	30 91 61 00 	lds	r19, 0x0061
 326:	82 1b       	sub	r24, r18
 328:	93 0b       	sbc	r25, r19
 32a:	80 3d       	cpi	r24, 0xD0	; 208
 32c:	91 05       	cpc	r25, r1
 32e:	f0 f4       	brcc	.+60     	; 0x36c <__stack+0x20d>
			{
				not_enough_volts++;
 330:	80 91 64 00 	lds	r24, 0x0064
 334:	90 91 65 00 	lds	r25, 0x0065
 338:	a0 91 66 00 	lds	r26, 0x0066
 33c:	b0 91 67 00 	lds	r27, 0x0067
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	a1 1d       	adc	r26, r1
 344:	b1 1d       	adc	r27, r1
 346:	80 93 64 00 	sts	0x0064, r24
 34a:	90 93 65 00 	sts	0x0065, r25
 34e:	a0 93 66 00 	sts	0x0066, r26
 352:	b0 93 67 00 	sts	0x0067, r27
				if(not_enough_volts >= 1000)
 356:	88 3e       	cpi	r24, 0xE8	; 232
 358:	93 40       	sbci	r25, 0x03	; 3
 35a:	a1 05       	cpc	r26, r1
 35c:	b1 05       	cpc	r27, r1
 35e:	30 f0       	brcs	.+12     	; 0x36c <__stack+0x20d>
				{
					go_back_bulk = TRUE;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 63 00 	sts	0x0063, r25
 368:	80 93 62 00 	sts	0x0062, r24
				}
			}
		
			if(battery_voltage - current_offset > 216)
 36c:	80 91 79 00 	lds	r24, 0x0079
 370:	90 91 7a 00 	lds	r25, 0x007A
 374:	82 1b       	sub	r24, r18
 376:	93 0b       	sbc	r25, r19
 378:	89 3d       	cpi	r24, 0xD9	; 217
 37a:	91 05       	cpc	r25, r1
 37c:	40 f0       	brcs	.+16     	; 0x38e <__stack+0x22f>
			{
				not_enough_volts = 0;
 37e:	10 92 64 00 	sts	0x0064, r1
 382:	10 92 65 00 	sts	0x0065, r1
 386:	10 92 66 00 	sts	0x0066, r1
 38a:	10 92 67 00 	sts	0x0067, r1
			}
		
			if(battery_voltage > 240)
 38e:	80 91 79 00 	lds	r24, 0x0079
 392:	90 91 7a 00 	lds	r25, 0x007A
 396:	81 3f       	cpi	r24, 0xF1	; 241
 398:	91 05       	cpc	r25, r1
 39a:	14 f0       	brlt	.+4      	; 0x3a0 <__stack+0x241>
			{
				OCR1B = 160;
 39c:	80 ea       	ldi	r24, 0xA0	; 160
 39e:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(battery_voltage < 170)
 3a0:	80 91 79 00 	lds	r24, 0x0079
 3a4:	90 91 7a 00 	lds	r25, 0x007A
 3a8:	8a 3a       	cpi	r24, 0xAA	; 170
 3aa:	91 05       	cpc	r25, r1
 3ac:	14 f4       	brge	.+4      	; 0x3b2 <__stack+0x253>
			{
				OCR1B = 130;
 3ae:	82 e8       	ldi	r24, 0x82	; 130
 3b0:	8c bd       	out	0x2c, r24	; 44
			}
		
			if(go_back_bulk)
 3b2:	80 91 62 00 	lds	r24, 0x0062
 3b6:	90 91 63 00 	lds	r25, 0x0063
 3ba:	89 2b       	or	r24, r25
 3bc:	31 f0       	breq	.+12     	; 0x3ca <__stack+0x26b>
			{
				charging_mode = CONSTANT_CURRENT;
 3be:	10 92 7f 00 	sts	0x007F, r1
				go_back_bulk = 0;
 3c2:	10 92 63 00 	sts	0x0063, r1
 3c6:	10 92 62 00 	sts	0x0062, r1
			}	
		
			if(battery_current < 10)
 3ca:	80 91 77 00 	lds	r24, 0x0077
 3ce:	90 91 78 00 	lds	r25, 0x0078
 3d2:	0a 97       	sbiw	r24, 0x0a	; 10
 3d4:	9c f4       	brge	.+38     	; 0x3fc <__stack+0x29d>
			{
				trickle_charge++;
 3d6:	80 91 68 00 	lds	r24, 0x0068
 3da:	90 91 69 00 	lds	r25, 0x0069
 3de:	a0 91 6a 00 	lds	r26, 0x006A
 3e2:	b0 91 6b 00 	lds	r27, 0x006B
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	a1 1d       	adc	r26, r1
 3ea:	b1 1d       	adc	r27, r1
 3ec:	80 93 68 00 	sts	0x0068, r24
 3f0:	90 93 69 00 	sts	0x0069, r25
 3f4:	a0 93 6a 00 	sts	0x006A, r26
 3f8:	b0 93 6b 00 	sts	0x006B, r27
			}
		
			if(battery_current > 30)
 3fc:	80 91 77 00 	lds	r24, 0x0077
 400:	90 91 78 00 	lds	r25, 0x0078
 404:	4f 97       	sbiw	r24, 0x1f	; 31
 406:	4c f0       	brlt	.+18     	; 0x41a <__stack+0x2bb>
			{
				trickle_charge = 0;
 408:	10 92 68 00 	sts	0x0068, r1
 40c:	10 92 69 00 	sts	0x0069, r1
 410:	10 92 6a 00 	sts	0x006A, r1
 414:	10 92 6b 00 	sts	0x006B, r1
 418:	08 95       	ret
			}
		
			if(trickle_charge >= 2000)
 41a:	80 91 68 00 	lds	r24, 0x0068
 41e:	90 91 69 00 	lds	r25, 0x0069
 422:	a0 91 6a 00 	lds	r26, 0x006A
 426:	b0 91 6b 00 	lds	r27, 0x006B
 42a:	80 3d       	cpi	r24, 0xD0	; 208
 42c:	97 40       	sbci	r25, 0x07	; 7
 42e:	a1 05       	cpc	r26, r1
 430:	b1 05       	cpc	r27, r1
 432:	e8 f1       	brcs	.+122    	; 0x4ae <__stack+0x34f>
			{
				charging_mode = TRICKLE_CHARGE;
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	80 93 7f 00 	sts	0x007F, r24
 43a:	08 95       	ret
		
		break;
		
		case TRICKLE_CHARGE:
			
			battery_voltage = adc_read_vbatt();
 43c:	05 de       	rcall	.-1014   	; 0x48 <adc_read_vbatt>
 43e:	90 93 7a 00 	sts	0x007A, r25
 442:	80 93 79 00 	sts	0x0079, r24
			battery_current = adc_read_ibatt();
 446:	0d de       	rcall	.-998    	; 0x62 <adc_read_ibatt>
 448:	90 93 78 00 	sts	0x0078, r25
 44c:	80 93 77 00 	sts	0x0077, r24
			current_offset = battery_current/32;
 450:	80 91 77 00 	lds	r24, 0x0077
 454:	90 91 78 00 	lds	r25, 0x0078
 458:	99 23       	and	r25, r25
 45a:	0c f4       	brge	.+2      	; 0x45e <__stack+0x2ff>
 45c:	4f 96       	adiw	r24, 0x1f	; 31
 45e:	95 95       	asr	r25
 460:	87 95       	ror	r24
 462:	95 95       	asr	r25
 464:	87 95       	ror	r24
 466:	95 95       	asr	r25
 468:	87 95       	ror	r24
 46a:	95 95       	asr	r25
 46c:	87 95       	ror	r24
 46e:	95 95       	asr	r25
 470:	87 95       	ror	r24
 472:	90 93 61 00 	sts	0x0061, r25
 476:	80 93 60 00 	sts	0x0060, r24
			
			if(battery_voltage - current_offset > 220)
 47a:	20 91 79 00 	lds	r18, 0x0079
 47e:	30 91 7a 00 	lds	r19, 0x007A
 482:	28 1b       	sub	r18, r24
 484:	39 0b       	sbc	r19, r25
 486:	2d 3d       	cpi	r18, 0xDD	; 221
 488:	31 05       	cpc	r19, r1
 48a:	20 f0       	brcs	.+8      	; 0x494 <__stack+0x335>
			{
				OCR1B -= 1;
 48c:	8c b5       	in	r24, 0x2c	; 44
 48e:	81 50       	subi	r24, 0x01	; 1
 490:	8c bd       	out	0x2c, r24	; 44
 492:	08 95       	ret
			}
		
			else if(battery_voltage - current_offset < 220)
 494:	20 91 79 00 	lds	r18, 0x0079
 498:	30 91 7a 00 	lds	r19, 0x007A
 49c:	a9 01       	movw	r20, r18
 49e:	48 1b       	sub	r20, r24
 4a0:	59 0b       	sbc	r21, r25
 4a2:	4c 3d       	cpi	r20, 0xDC	; 220
 4a4:	51 05       	cpc	r21, r1
 4a6:	18 f4       	brcc	.+6      	; 0x4ae <__stack+0x34f>
			{
				OCR1B += 3;		
 4a8:	8c b5       	in	r24, 0x2c	; 44
 4aa:	8d 5f       	subi	r24, 0xFD	; 253
 4ac:	8c bd       	out	0x2c, r24	; 44
 4ae:	08 95       	ret

000004b0 <debounce_jack>:
#include "debounce.h"
#include "lan.h"


int debounce_jack(void)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <debounce_jack+0x6>
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
	int jack_plugged_in;
	volatile int debounce_counter = 0;
 4ba:	1a 82       	std	Y+2, r1	; 0x02
 4bc:	19 82       	std	Y+1, r1	; 0x01
	
	while(debounce_counter < JACK_DELAY_TIME)
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	9a 81       	ldd	r25, Y+2	; 0x02
 4c2:	80 39       	cpi	r24, 0x90	; 144
 4c4:	91 40       	sbci	r25, 0x01	; 1
 4c6:	54 f4       	brge	.+20     	; 0x4dc <debounce_jack+0x2c>
	{
		debounce_counter += 1;
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	9a 83       	std	Y+2, r25	; 0x02
 4d0:	89 83       	std	Y+1, r24	; 0x01
int debounce_jack(void)
{
	int jack_plugged_in;
	volatile int debounce_counter = 0;
	
	while(debounce_counter < JACK_DELAY_TIME)
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	9a 81       	ldd	r25, Y+2	; 0x02
 4d6:	80 39       	cpi	r24, 0x90	; 144
 4d8:	91 40       	sbci	r25, 0x01	; 1
 4da:	b4 f3       	brlt	.-20     	; 0x4c8 <debounce_jack+0x18>
	{
		debounce_counter += 1;
	}
	
	if (JACK_PLUGGED_IN_NOW)
 4dc:	b4 9b       	sbis	0x16, 4	; 22
 4de:	12 c0       	rjmp	.+36     	; 0x504 <debounce_jack+0x54>
	{
		jack_plugged_in = TRUE;
		debounce_counter = 0;
 4e0:	1a 82       	std	Y+2, r1	; 0x02
 4e2:	19 82       	std	Y+1, r1	; 0x01
		
		while(debounce_counter < JACK_IGNORE_TIME)
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	9a 81       	ldd	r25, Y+2	; 0x02
 4e8:	88 3e       	cpi	r24, 0xE8	; 232
 4ea:	93 40       	sbci	r25, 0x03	; 3
 4ec:	74 f4       	brge	.+28     	; 0x50a <debounce_jack+0x5a>
		{
			debounce_counter += 1;
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	9a 81       	ldd	r25, Y+2	; 0x02
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	9a 83       	std	Y+2, r25	; 0x02
 4f6:	89 83       	std	Y+1, r24	; 0x01
	if (JACK_PLUGGED_IN_NOW)
	{
		jack_plugged_in = TRUE;
		debounce_counter = 0;
		
		while(debounce_counter < JACK_IGNORE_TIME)
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	9a 81       	ldd	r25, Y+2	; 0x02
 4fc:	88 3e       	cpi	r24, 0xE8	; 232
 4fe:	93 40       	sbci	r25, 0x03	; 3
 500:	b4 f3       	brlt	.-20     	; 0x4ee <debounce_jack+0x3e>
 502:	06 c0       	rjmp	.+12     	; 0x510 <debounce_jack+0x60>
		
	}
	
	else
	{
		jack_plugged_in = FALSE;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	05 c0       	rjmp	.+10     	; 0x514 <debounce_jack+0x64>
		debounce_counter += 1;
	}
	
	if (JACK_PLUGGED_IN_NOW)
	{
		jack_plugged_in = TRUE;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <debounce_jack+0x64>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
	{
		jack_plugged_in = FALSE;
	}
	

	debounce_counter = 0;
 514:	1a 82       	std	Y+2, r1	; 0x02
 516:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_PCI_ENABLE;
 518:	22 b5       	in	r18, 0x22	; 34
 51a:	21 60       	ori	r18, 0x01	; 1
 51c:	22 bd       	out	0x22, r18	; 34
	JACK_PCI_ENABLE;	//define!
 51e:	22 b5       	in	r18, 0x22	; 34
 520:	20 61       	ori	r18, 0x10	; 16
 522:	22 bd       	out	0x22, r18	; 34
	return jack_plugged_in;
}
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <setup>:
}


void setup(void)
{
	cli();
 52e:	f8 94       	cli

    int i;
	for(i = 0; i <= 7; i++)
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PCMSK0,i);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	63 b5       	in	r22, 0x23	; 35
 53a:	9a 01       	movw	r18, r20
 53c:	08 2e       	mov	r0, r24
 53e:	02 c0       	rjmp	.+4      	; 0x544 <setup+0x16>
 540:	22 0f       	add	r18, r18
 542:	33 1f       	adc	r19, r19
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <setup+0x12>
 548:	20 95       	com	r18
 54a:	32 2f       	mov	r19, r18
 54c:	36 23       	and	r19, r22
 54e:	33 bd       	out	0x23, r19	; 35
		CLRBIT(PCMSK1,i);
 550:	32 b5       	in	r19, 0x22	; 34
 552:	23 23       	and	r18, r19
 554:	22 bd       	out	0x22, r18	; 34
void setup(void)
{
	cli();

    int i;
	for(i = 0; i <= 7; i++)
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	88 30       	cpi	r24, 0x08	; 8
 55a:	91 05       	cpc	r25, r1
 55c:	69 f7       	brne	.-38     	; 0x538 <setup+0xa>
		CLRBIT(PCMSK0,i);
		CLRBIT(PCMSK1,i);
	}
  
    /*  Enable the PLL.  */
    ENABLE_PLL;
 55e:	89 b5       	in	r24, 0x29	; 41
 560:	82 60       	ori	r24, 0x02	; 2
 562:	89 bd       	out	0x29, r24	; 41
    while(PLL_IS_NOT_LOCKED)
 564:	09 b4       	in	r0, 0x29	; 41
 566:	00 fe       	sbrs	r0, 0
 568:	fd cf       	rjmp	.-6      	; 0x564 <setup+0x36>
    {
        // Waiting for PLOCK bit to be set
    }
    ENABLE_PCK;
 56a:	89 b5       	in	r24, 0x29	; 41
 56c:	84 60       	ori	r24, 0x04	; 4
 56e:	89 bd       	out	0x29, r24	; 41

    /*  Use a prescaler of 16 to set the system clock at 500 kHz (1 MHz?).
    */
    SET_SYS_CLK;
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	88 bd       	out	0x28, r24	; 40
 574:	84 e0       	ldi	r24, 0x04	; 4
 576:	88 bd       	out	0x28, r24	; 40

    /*  IO Configurations
    */
	CFG_IO_BUTTON;		
 578:	b8 98       	cbi	0x17, 0	; 23
 57a:	c0 9a       	sbi	0x18, 0	; 24
	CFG_IO_LED_ENABLE;
 57c:	b9 9a       	sbi	0x17, 1	; 23
 57e:	c1 98       	cbi	0x18, 1	; 24
	CFG_IO_JACK;	
 580:	bc 98       	cbi	0x17, 4	; 23
 582:	c4 98       	cbi	0x18, 4	; 24
    CFG_IO_PWM;			
 584:	bb 9a       	sbi	0x17, 3	; 23
 586:	c3 98       	cbi	0x18, 3	; 24
    
    /*  Clock 1 (PWM clock) Configurations
        Use PLL to set clock 1 at 64 MHz, asynchronous from the system clock.
        Use a prescaler of 4 and a TOP value of 256 to have FPWM frequency at 62.5 kHz.
    */
    CFG_PWM;
 588:	80 b7       	in	r24, 0x30	; 48
 58a:	8f 7d       	andi	r24, 0xDF	; 223
 58c:	80 bf       	out	0x30, r24	; 48
 58e:	80 b7       	in	r24, 0x30	; 48
 590:	8f 7e       	andi	r24, 0xEF	; 239
 592:	80 bf       	out	0x30, r24	; 48
 594:	80 b7       	in	r24, 0x30	; 48
 596:	81 60       	ori	r24, 0x01	; 1
 598:	80 bf       	out	0x30, r24	; 48
 59a:	86 b5       	in	r24, 0x26	; 38
 59c:	8d 7f       	andi	r24, 0xFD	; 253
 59e:	86 bd       	out	0x26, r24	; 38
 5a0:	86 b5       	in	r24, 0x26	; 38
 5a2:	8e 7f       	andi	r24, 0xFE	; 254
 5a4:	86 bd       	out	0x26, r24	; 38
    FPWM_NORMAL_PORT_OP;
 5a6:	80 b7       	in	r24, 0x30	; 48
 5a8:	8f 7d       	andi	r24, 0xDF	; 223
 5aa:	80 bf       	out	0x30, r24	; 48
    TURN_OFF_PWM_CLK;
 5ac:	8f b5       	in	r24, 0x2f	; 47
 5ae:	87 7f       	andi	r24, 0xF7	; 247
 5b0:	8f bd       	out	0x2f, r24	; 47
 5b2:	8f b5       	in	r24, 0x2f	; 47
 5b4:	8b 7f       	andi	r24, 0xFB	; 251
 5b6:	8f bd       	out	0x2f, r24	; 47
 5b8:	8f b5       	in	r24, 0x2f	; 47
 5ba:	8d 7f       	andi	r24, 0xFD	; 253
 5bc:	8f bd       	out	0x2f, r24	; 47
 5be:	8f b5       	in	r24, 0x2f	; 47
 5c0:	8e 7f       	andi	r24, 0xFE	; 254
 5c2:	8f bd       	out	0x2f, r24	; 47
	OCR1C = 255;
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	8b bd       	out	0x2b, r24	; 43
    OCR1B = 0;
 5c8:	1c bc       	out	0x2c, r1	; 44
		
    CFG_ADC;
 5ca:	3f 98       	cbi	0x07, 7	; 7
 5cc:	3e 9a       	sbi	0x07, 6	; 7
 5ce:	3d 9a       	sbi	0x07, 5	; 7
 5d0:	35 98       	cbi	0x06, 5	; 6

    ADC_ENABLE;
 5d2:	37 9a       	sbi	0x06, 7	; 6
	ADC_ISR_ENABLE;
 5d4:	33 9a       	sbi	0x06, 3	; 6
    
    LED_ENABLE;
 5d6:	c1 9a       	sbi	0x18, 1	; 24

	PCI_ENABLE;
 5d8:	8b b7       	in	r24, 0x3b	; 59
 5da:	80 62       	ori	r24, 0x20	; 32
 5dc:	8b bf       	out	0x3b, r24	; 59
 5de:	8b b7       	in	r24, 0x3b	; 59
 5e0:	80 61       	ori	r24, 0x10	; 16
 5e2:	8b bf       	out	0x3b, r24	; 59
	BUTTON_PCI_ENABLE;
 5e4:	82 b5       	in	r24, 0x22	; 34
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	82 bd       	out	0x22, r24	; 34
	JACK_PCI_ENABLE;
 5ea:	82 b5       	in	r24, 0x22	; 34
 5ec:	80 61       	ori	r24, 0x10	; 16
 5ee:	82 bd       	out	0x22, r24	; 34
	
	FPWM_CLR_COMP_MATCH;
 5f0:	80 b7       	in	r24, 0x30	; 48
 5f2:	80 62       	ori	r24, 0x20	; 32
 5f4:	80 bf       	out	0x30, r24	; 48
	TURN_ON_PWM_CLK;
 5f6:	8f b5       	in	r24, 0x2f	; 47
 5f8:	87 7f       	andi	r24, 0xF7	; 247
 5fa:	8f bd       	out	0x2f, r24	; 47
 5fc:	8f b5       	in	r24, 0x2f	; 47
 5fe:	8b 7f       	andi	r24, 0xFB	; 251
 600:	8f bd       	out	0x2f, r24	; 47
 602:	8f b5       	in	r24, 0x2f	; 47
 604:	82 60       	ori	r24, 0x02	; 2
 606:	8f bd       	out	0x2f, r24	; 47
 608:	8f b5       	in	r24, 0x2f	; 47
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	8f bd       	out	0x2f, r24	; 47
#if 0	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
#endif
	
	battery_current = 0;
 60e:	10 92 78 00 	sts	0x0078, r1
 612:	10 92 77 00 	sts	0x0077, r1
	battery_voltage = 0;
 616:	10 92 7a 00 	sts	0x007A, r1
 61a:	10 92 79 00 	sts	0x0079, r1

    sei();
 61e:	78 94       	sei
 620:	08 95       	ret

00000622 <loop>:
#endif

#if 1


if(jack_needs_debounce)
 622:	80 91 75 00 	lds	r24, 0x0075
 626:	90 91 76 00 	lds	r25, 0x0076
 62a:	89 2b       	or	r24, r25
 62c:	49 f0       	breq	.+18     	; 0x640 <loop+0x1e>
{
	jack_state = debounce_jack();
 62e:	40 df       	rcall	.-384    	; 0x4b0 <debounce_jack>
 630:	90 93 74 00 	sts	0x0074, r25
 634:	80 93 73 00 	sts	0x0073, r24
	jack_needs_debounce = FALSE;
 638:	10 92 76 00 	sts	0x0076, r1
 63c:	10 92 75 00 	sts	0x0075, r1
}

if(jack_state == TRUE)
 640:	80 91 73 00 	lds	r24, 0x0073
 644:	90 91 74 00 	lds	r25, 0x0074
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	49 f4       	brne	.+18     	; 0x65e <loop+0x3c>
{
	lantern_op_mode = CHARGING;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	80 93 72 00 	sts	0x0072, r24
	initialize_charge();
 652:	14 dd       	rcall	.-1496   	; 0x7c <initialize_charge>
	lantern_op_mode = LIGHTING;
}
#endif

#if 1
while(lantern_op_mode == CHARGING)
 654:	80 91 72 00 	lds	r24, 0x0072
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	51 f0       	breq	.+20     	; 0x670 <loop+0x4e>
 65c:	08 95       	ret
{
	lantern_op_mode = CHARGING;
	initialize_charge();
}

else if(jack_state == FALSE)
 65e:	80 91 73 00 	lds	r24, 0x0073
 662:	90 91 74 00 	lds	r25, 0x0074
 666:	89 2b       	or	r24, r25
 668:	a9 f7       	brne	.-22     	; 0x654 <loop+0x32>
{
	lantern_op_mode = LIGHTING;
 66a:	10 92 72 00 	sts	0x0072, r1
 66e:	08 95       	ret
#endif

#if 1
while(lantern_op_mode == CHARGING)
{
	charge_battery();
 670:	4e dd       	rcall	.-1380   	; 0x10e <charge_battery>
	lantern_op_mode = LIGHTING;
}
#endif

#if 1
while(lantern_op_mode == CHARGING)
 672:	80 91 72 00 	lds	r24, 0x0072
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	d9 f3       	breq	.-10     	; 0x670 <loop+0x4e>
 67a:	08 95       	ret

0000067c <main>:
volatile unsigned int battery_current;


int main(void)
{
    setup();
 67c:	58 df       	rcall	.-336    	; 0x52e <setup>
	for (;;) 
	{
		loop();
 67e:	d1 df       	rcall	.-94     	; 0x622 <loop>
 680:	fe cf       	rjmp	.-4      	; 0x67e <main+0x2>

00000682 <__vector_2>:
	}
#endif
}

ISR(PCINT_vect)
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25

	if(JACK_PLUGGED_IN_NOW)
 690:	b4 9b       	sbis	0x16, 4	; 22
 692:	0b c0       	rjmp	.+22     	; 0x6aa <__vector_2+0x28>
	{
		LED_DISABLE;
 694:	c1 98       	cbi	0x18, 1	; 24
		BUTTON_PCI_DISABLE;
 696:	82 b5       	in	r24, 0x22	; 34
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	82 bd       	out	0x22, r24	; 34
		jack_needs_debounce = TRUE;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	90 93 76 00 	sts	0x0076, r25
 6a4:	80 93 75 00 	sts	0x0075, r24
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <__vector_2+0x38>
//		lantern_op_mode = SAFE_OFF;
	}
	else if(JACK_PLUGGED_IN_NOW == 0)
 6aa:	b4 99       	sbic	0x16, 4	; 22
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <__vector_2+0x38>
	{
//		 
		jack_needs_debounce = TRUE;	
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	90 93 76 00 	sts	0x0076, r25
 6b6:	80 93 75 00 	sts	0x0075, r24
	}
	
}
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <__vector_11>:


ISR(ADC_vect)
{
 6c8:	1f 92       	push	r1
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	0f 92       	push	r0
 6d0:	11 24       	eor	r1, r1
	;
}
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
